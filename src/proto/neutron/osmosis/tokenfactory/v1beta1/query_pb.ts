// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file osmosis/tokenfactory/v1beta1/query.proto (package osmosis.tokenfactory.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { DenomAuthorityMetadata } from "./authorityMetadata_pb.js";

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message osmosis.tokenfactory.v1beta1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.tokenfactory.v1beta1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message osmosis.tokenfactory.v1beta1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params defines the parameters of the module.
   *
   * @generated from field: osmosis.tokenfactory.v1beta1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.tokenfactory.v1beta1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryDenomAuthorityMetadataRequest defines the request structure for the
 * DenomAuthorityMetadata gRPC query.
 *
 * @generated from message osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest
 */
export class QueryDenomAuthorityMetadataRequest extends Message<QueryDenomAuthorityMetadataRequest> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string subdenom = 2;
   */
  subdenom = "";

  constructor(data?: PartialMessage<QueryDenomAuthorityMetadataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subdenom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDenomAuthorityMetadataRequest {
    return new QueryDenomAuthorityMetadataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDenomAuthorityMetadataRequest {
    return new QueryDenomAuthorityMetadataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDenomAuthorityMetadataRequest {
    return new QueryDenomAuthorityMetadataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDenomAuthorityMetadataRequest | PlainMessage<QueryDenomAuthorityMetadataRequest> | undefined, b: QueryDenomAuthorityMetadataRequest | PlainMessage<QueryDenomAuthorityMetadataRequest> | undefined): boolean {
    return proto3.util.equals(QueryDenomAuthorityMetadataRequest, a, b);
  }
}

/**
 * QueryDenomAuthorityMetadataResponse defines the response structure for the
 * DenomAuthorityMetadata gRPC query.
 *
 * @generated from message osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse
 */
export class QueryDenomAuthorityMetadataResponse extends Message<QueryDenomAuthorityMetadataResponse> {
  /**
   * @generated from field: osmosis.tokenfactory.v1beta1.DenomAuthorityMetadata authority_metadata = 1;
   */
  authorityMetadata?: DenomAuthorityMetadata;

  constructor(data?: PartialMessage<QueryDenomAuthorityMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.tokenfactory.v1beta1.QueryDenomAuthorityMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority_metadata", kind: "message", T: DenomAuthorityMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDenomAuthorityMetadataResponse {
    return new QueryDenomAuthorityMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDenomAuthorityMetadataResponse {
    return new QueryDenomAuthorityMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDenomAuthorityMetadataResponse {
    return new QueryDenomAuthorityMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDenomAuthorityMetadataResponse | PlainMessage<QueryDenomAuthorityMetadataResponse> | undefined, b: QueryDenomAuthorityMetadataResponse | PlainMessage<QueryDenomAuthorityMetadataResponse> | undefined): boolean {
    return proto3.util.equals(QueryDenomAuthorityMetadataResponse, a, b);
  }
}

/**
 * QueryDenomsFromCreatorRequest defines the request structure for the
 * DenomsFromCreator gRPC query.
 *
 * @generated from message osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest
 */
export class QueryDenomsFromCreatorRequest extends Message<QueryDenomsFromCreatorRequest> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  constructor(data?: PartialMessage<QueryDenomsFromCreatorRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDenomsFromCreatorRequest {
    return new QueryDenomsFromCreatorRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDenomsFromCreatorRequest {
    return new QueryDenomsFromCreatorRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDenomsFromCreatorRequest {
    return new QueryDenomsFromCreatorRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDenomsFromCreatorRequest | PlainMessage<QueryDenomsFromCreatorRequest> | undefined, b: QueryDenomsFromCreatorRequest | PlainMessage<QueryDenomsFromCreatorRequest> | undefined): boolean {
    return proto3.util.equals(QueryDenomsFromCreatorRequest, a, b);
  }
}

/**
 * QueryDenomsFromCreatorRequest defines the response structure for the
 * DenomsFromCreator gRPC query.
 *
 * @generated from message osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse
 */
export class QueryDenomsFromCreatorResponse extends Message<QueryDenomsFromCreatorResponse> {
  /**
   * @generated from field: repeated string denoms = 1;
   */
  denoms: string[] = [];

  constructor(data?: PartialMessage<QueryDenomsFromCreatorResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.tokenfactory.v1beta1.QueryDenomsFromCreatorResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denoms", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDenomsFromCreatorResponse {
    return new QueryDenomsFromCreatorResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDenomsFromCreatorResponse {
    return new QueryDenomsFromCreatorResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDenomsFromCreatorResponse {
    return new QueryDenomsFromCreatorResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDenomsFromCreatorResponse | PlainMessage<QueryDenomsFromCreatorResponse> | undefined, b: QueryDenomsFromCreatorResponse | PlainMessage<QueryDenomsFromCreatorResponse> | undefined): boolean {
    return proto3.util.equals(QueryDenomsFromCreatorResponse, a, b);
  }
}

/**
 * @generated from message osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest
 */
export class QueryBeforeSendHookAddressRequest extends Message<QueryBeforeSendHookAddressRequest> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string subdenom = 2;
   */
  subdenom = "";

  constructor(data?: PartialMessage<QueryBeforeSendHookAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subdenom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBeforeSendHookAddressRequest {
    return new QueryBeforeSendHookAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBeforeSendHookAddressRequest {
    return new QueryBeforeSendHookAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBeforeSendHookAddressRequest {
    return new QueryBeforeSendHookAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBeforeSendHookAddressRequest | PlainMessage<QueryBeforeSendHookAddressRequest> | undefined, b: QueryBeforeSendHookAddressRequest | PlainMessage<QueryBeforeSendHookAddressRequest> | undefined): boolean {
    return proto3.util.equals(QueryBeforeSendHookAddressRequest, a, b);
  }
}

/**
 * QueryBeforeSendHookAddressResponse defines the response structure for the
 * DenomBeforeSendHook gRPC query.
 *
 * @generated from message osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse
 */
export class QueryBeforeSendHookAddressResponse extends Message<QueryBeforeSendHookAddressResponse> {
  /**
   * @generated from field: string contract_addr = 1;
   */
  contractAddr = "";

  constructor(data?: PartialMessage<QueryBeforeSendHookAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "osmosis.tokenfactory.v1beta1.QueryBeforeSendHookAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryBeforeSendHookAddressResponse {
    return new QueryBeforeSendHookAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryBeforeSendHookAddressResponse {
    return new QueryBeforeSendHookAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryBeforeSendHookAddressResponse {
    return new QueryBeforeSendHookAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryBeforeSendHookAddressResponse | PlainMessage<QueryBeforeSendHookAddressResponse> | undefined, b: QueryBeforeSendHookAddressResponse | PlainMessage<QueryBeforeSendHookAddressResponse> | undefined): boolean {
    return proto3.util.equals(QueryBeforeSendHookAddressResponse, a, b);
  }
}

