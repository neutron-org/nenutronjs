// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file gaia/globalfee/v1beta1/params.proto (package gaia.globalfee.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { DecCoin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * Params defines the set of module parameters.
 *
 * @generated from message gaia.globalfee.v1beta1.Params
 */
export class Params extends Message<Params> {
  /**
   * minimum_gas_prices stores the minimum gas price(s) for all TX on the chain.
   * When multiple coins are defined then they are accepted alternatively.
   * The list must be sorted by denoms asc. No duplicate denoms or zero amount
   * values allowed. For more information see
   * https://docs.cosmos.network/main/modules/auth#concepts
   *
   * @generated from field: repeated cosmos.base.v1beta1.DecCoin minimum_gas_prices = 1;
   */
  minimumGasPrices: DecCoin[] = [];

  /**
   * bypass_min_fee_msg_types defines a list of message type urls
   * that are free of fee charge.
   *
   * @generated from field: repeated string bypass_min_fee_msg_types = 2;
   */
  bypassMinFeeMsgTypes: string[] = [];

  /**
   * max_total_bypass_min_fee_msg_gas_usage defines the total maximum gas usage
   * allowed for a transaction containing only messages of types in bypass_min_fee_msg_types
   * to bypass fee charge.
   *
   * @generated from field: uint64 max_total_bypass_min_fee_msg_gas_usage = 3;
   */
  maxTotalBypassMinFeeMsgGasUsage = protoInt64.zero;

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gaia.globalfee.v1beta1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "minimum_gas_prices", kind: "message", T: DecCoin, repeated: true },
    { no: 2, name: "bypass_min_fee_msg_types", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "max_total_bypass_min_fee_msg_gas_usage", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

