// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file neutron/dex/deposit_record.proto (package neutron.dex, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { PairID } from "./pair_id_pb.js";
import { Pool } from "./pool_pb.js";

/**
 * @generated from message neutron.dex.DepositRecord
 */
export class DepositRecord extends Message<DepositRecord> {
  /**
   * @generated from field: neutron.dex.PairID pair_id = 1;
   */
  pairId?: PairID;

  /**
   * @generated from field: string shares_owned = 2;
   */
  sharesOwned = "";

  /**
   * @generated from field: int64 center_tick_index = 3;
   */
  centerTickIndex = protoInt64.zero;

  /**
   * @generated from field: int64 lower_tick_index = 4;
   */
  lowerTickIndex = protoInt64.zero;

  /**
   * @generated from field: int64 upper_tick_index = 5;
   */
  upperTickIndex = protoInt64.zero;

  /**
   * @generated from field: uint64 fee = 6;
   */
  fee = protoInt64.zero;

  /**
   * @generated from field: string total_shares = 7;
   */
  totalShares = "";

  /**
   * @generated from field: neutron.dex.Pool pool = 8;
   */
  pool?: Pool;

  constructor(data?: PartialMessage<DepositRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.DepositRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pair_id", kind: "message", T: PairID },
    { no: 2, name: "shares_owned", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "center_tick_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "lower_tick_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "upper_tick_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "fee", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "total_shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "pool", kind: "message", T: Pool },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DepositRecord {
    return new DepositRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DepositRecord {
    return new DepositRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DepositRecord {
    return new DepositRecord().fromJsonString(jsonString, options);
  }

  static equals(a: DepositRecord | PlainMessage<DepositRecord> | undefined, b: DepositRecord | PlainMessage<DepositRecord> | undefined): boolean {
    return proto3.util.equals(DepositRecord, a, b);
  }
}

