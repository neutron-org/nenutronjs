// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file neutron/dex/limit_order_tranche.proto (package neutron.dex, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { TradePairID } from "./trade_pair_id_pb.js";

/**
 * @generated from message neutron.dex.LimitOrderTrancheKey
 */
export class LimitOrderTrancheKey extends Message<LimitOrderTrancheKey> {
  /**
   * @generated from field: neutron.dex.TradePairID trade_pair_id = 1;
   */
  tradePairId?: TradePairID;

  /**
   * @generated from field: int64 tick_index_taker_to_maker = 2;
   */
  tickIndexTakerToMaker = protoInt64.zero;

  /**
   * @generated from field: string tranche_key = 3;
   */
  trancheKey = "";

  constructor(data?: PartialMessage<LimitOrderTrancheKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.LimitOrderTrancheKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trade_pair_id", kind: "message", T: TradePairID },
    { no: 2, name: "tick_index_taker_to_maker", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "tranche_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LimitOrderTrancheKey {
    return new LimitOrderTrancheKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LimitOrderTrancheKey {
    return new LimitOrderTrancheKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LimitOrderTrancheKey {
    return new LimitOrderTrancheKey().fromJsonString(jsonString, options);
  }

  static equals(a: LimitOrderTrancheKey | PlainMessage<LimitOrderTrancheKey> | undefined, b: LimitOrderTrancheKey | PlainMessage<LimitOrderTrancheKey> | undefined): boolean {
    return proto3.util.equals(LimitOrderTrancheKey, a, b);
  }
}

/**
 * @generated from message neutron.dex.LimitOrderTranche
 */
export class LimitOrderTranche extends Message<LimitOrderTranche> {
  /**
   * @generated from field: neutron.dex.LimitOrderTrancheKey key = 1;
   */
  key?: LimitOrderTrancheKey;

  /**
   * @generated from field: string reserves_maker_denom = 2;
   */
  reservesMakerDenom = "";

  /**
   * @generated from field: string reserves_taker_denom = 3;
   */
  reservesTakerDenom = "";

  /**
   * @generated from field: string total_maker_denom = 4;
   */
  totalMakerDenom = "";

  /**
   * GoodTilDate is represented as seconds since  January 1, year 1, 00:00:00.00 UTC
   * LimitOrders with goodTilDate set are valid as long as blockTime <= goodTilDate
   *
   * @generated from field: string total_taker_denom = 5;
   */
  totalTakerDenom = "";

  /**
   * JIT orders also use goodTilDate to handle deletion but represent a special case
   * All JIT orders have a goodTilDate of 0 and an exception is made to still still treat these orders as live
   * Order deletion still functions the same and the orders will be deleted at the end of the block
   *
   * @generated from field: google.protobuf.Timestamp expiration_time = 6;
   */
  expirationTime?: Timestamp;

  /**
   * @generated from field: string price_taker_to_maker = 7;
   */
  priceTakerToMaker = "";

  constructor(data?: PartialMessage<LimitOrderTranche>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.LimitOrderTranche";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: LimitOrderTrancheKey },
    { no: 2, name: "reserves_maker_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reserves_taker_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "total_maker_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "total_taker_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "expiration_time", kind: "message", T: Timestamp },
    { no: 7, name: "price_taker_to_maker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LimitOrderTranche {
    return new LimitOrderTranche().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LimitOrderTranche {
    return new LimitOrderTranche().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LimitOrderTranche {
    return new LimitOrderTranche().fromJsonString(jsonString, options);
  }

  static equals(a: LimitOrderTranche | PlainMessage<LimitOrderTranche> | undefined, b: LimitOrderTranche | PlainMessage<LimitOrderTranche> | undefined): boolean {
    return proto3.util.equals(LimitOrderTranche, a, b);
  }
}

