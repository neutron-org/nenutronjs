// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file neutron/dex/pair_id.proto (package neutron.dex, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message neutron.dex.PairID
 */
export class PairID extends Message<PairID> {
  /**
   * @generated from field: string token0 = 1;
   */
  token0 = "";

  /**
   * @generated from field: string token1 = 2;
   */
  token1 = "";

  constructor(data?: PartialMessage<PairID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.PairID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token0", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "token1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PairID {
    return new PairID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PairID {
    return new PairID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PairID {
    return new PairID().fromJsonString(jsonString, options);
  }

  static equals(a: PairID | PlainMessage<PairID> | undefined, b: PairID | PlainMessage<PairID> | undefined): boolean {
    return proto3.util.equals(PairID, a, b);
  }
}

