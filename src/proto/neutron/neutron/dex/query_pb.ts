// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file neutron/dex/query.proto (package neutron.dex, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { LimitOrderTrancheUser } from "./limit_order_tranche_user_pb.js";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination_pb.js";
import { LimitOrderTranche } from "./limit_order_tranche_pb.js";
import { DepositRecord } from "./deposit_record_pb.js";
import { TickLiquidity } from "./tick_liquidity_pb.js";
import { PoolReserves } from "./pool_reserves_pb.js";
import { LimitOrderType, MultiHopRoute } from "./tx_pb.js";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";
import { Pool } from "./pool_pb.js";
import { PoolMetadata } from "./pool_metadata_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message neutron.dex.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message neutron.dex.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: neutron.dex.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryGetLimitOrderTrancheUserRequest
 */
export class QueryGetLimitOrderTrancheUserRequest extends Message<QueryGetLimitOrderTrancheUserRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: string tranche_key = 2;
   */
  trancheKey = "";

  /**
   * @generated from field: bool calc_withdrawable_shares = 3;
   */
  calcWithdrawableShares = false;

  constructor(data?: PartialMessage<QueryGetLimitOrderTrancheUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryGetLimitOrderTrancheUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tranche_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "calc_withdrawable_shares", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetLimitOrderTrancheUserRequest {
    return new QueryGetLimitOrderTrancheUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetLimitOrderTrancheUserRequest {
    return new QueryGetLimitOrderTrancheUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetLimitOrderTrancheUserRequest {
    return new QueryGetLimitOrderTrancheUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetLimitOrderTrancheUserRequest | PlainMessage<QueryGetLimitOrderTrancheUserRequest> | undefined, b: QueryGetLimitOrderTrancheUserRequest | PlainMessage<QueryGetLimitOrderTrancheUserRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetLimitOrderTrancheUserRequest, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryGetLimitOrderTrancheUserResponse
 */
export class QueryGetLimitOrderTrancheUserResponse extends Message<QueryGetLimitOrderTrancheUserResponse> {
  /**
   * @generated from field: neutron.dex.LimitOrderTrancheUser limit_order_tranche_user = 1;
   */
  limitOrderTrancheUser?: LimitOrderTrancheUser;

  /**
   * @generated from field: string withdrawable_shares = 2;
   */
  withdrawableShares = "";

  constructor(data?: PartialMessage<QueryGetLimitOrderTrancheUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryGetLimitOrderTrancheUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit_order_tranche_user", kind: "message", T: LimitOrderTrancheUser },
    { no: 2, name: "withdrawable_shares", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetLimitOrderTrancheUserResponse {
    return new QueryGetLimitOrderTrancheUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetLimitOrderTrancheUserResponse {
    return new QueryGetLimitOrderTrancheUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetLimitOrderTrancheUserResponse {
    return new QueryGetLimitOrderTrancheUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetLimitOrderTrancheUserResponse | PlainMessage<QueryGetLimitOrderTrancheUserResponse> | undefined, b: QueryGetLimitOrderTrancheUserResponse | PlainMessage<QueryGetLimitOrderTrancheUserResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetLimitOrderTrancheUserResponse, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryAllLimitOrderTrancheUserRequest
 */
export class QueryAllLimitOrderTrancheUserRequest extends Message<QueryAllLimitOrderTrancheUserRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllLimitOrderTrancheUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryAllLimitOrderTrancheUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllLimitOrderTrancheUserRequest {
    return new QueryAllLimitOrderTrancheUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllLimitOrderTrancheUserRequest {
    return new QueryAllLimitOrderTrancheUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllLimitOrderTrancheUserRequest {
    return new QueryAllLimitOrderTrancheUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllLimitOrderTrancheUserRequest | PlainMessage<QueryAllLimitOrderTrancheUserRequest> | undefined, b: QueryAllLimitOrderTrancheUserRequest | PlainMessage<QueryAllLimitOrderTrancheUserRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllLimitOrderTrancheUserRequest, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryAllLimitOrderTrancheUserResponse
 */
export class QueryAllLimitOrderTrancheUserResponse extends Message<QueryAllLimitOrderTrancheUserResponse> {
  /**
   * @generated from field: repeated neutron.dex.LimitOrderTrancheUser limit_order_tranche_user = 1;
   */
  limitOrderTrancheUser: LimitOrderTrancheUser[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllLimitOrderTrancheUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryAllLimitOrderTrancheUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit_order_tranche_user", kind: "message", T: LimitOrderTrancheUser, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllLimitOrderTrancheUserResponse {
    return new QueryAllLimitOrderTrancheUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllLimitOrderTrancheUserResponse {
    return new QueryAllLimitOrderTrancheUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllLimitOrderTrancheUserResponse {
    return new QueryAllLimitOrderTrancheUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllLimitOrderTrancheUserResponse | PlainMessage<QueryAllLimitOrderTrancheUserResponse> | undefined, b: QueryAllLimitOrderTrancheUserResponse | PlainMessage<QueryAllLimitOrderTrancheUserResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllLimitOrderTrancheUserResponse, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryGetLimitOrderTrancheRequest
 */
export class QueryGetLimitOrderTrancheRequest extends Message<QueryGetLimitOrderTrancheRequest> {
  /**
   * @generated from field: string pair_id = 1;
   */
  pairId = "";

  /**
   * @generated from field: int64 tick_index = 2;
   */
  tickIndex = protoInt64.zero;

  /**
   * @generated from field: string token_in = 3;
   */
  tokenIn = "";

  /**
   * @generated from field: string tranche_key = 4;
   */
  trancheKey = "";

  constructor(data?: PartialMessage<QueryGetLimitOrderTrancheRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryGetLimitOrderTrancheRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pair_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tick_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "token_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "tranche_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetLimitOrderTrancheRequest {
    return new QueryGetLimitOrderTrancheRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetLimitOrderTrancheRequest {
    return new QueryGetLimitOrderTrancheRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetLimitOrderTrancheRequest {
    return new QueryGetLimitOrderTrancheRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetLimitOrderTrancheRequest | PlainMessage<QueryGetLimitOrderTrancheRequest> | undefined, b: QueryGetLimitOrderTrancheRequest | PlainMessage<QueryGetLimitOrderTrancheRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetLimitOrderTrancheRequest, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryGetLimitOrderTrancheResponse
 */
export class QueryGetLimitOrderTrancheResponse extends Message<QueryGetLimitOrderTrancheResponse> {
  /**
   * @generated from field: neutron.dex.LimitOrderTranche limit_order_tranche = 1;
   */
  limitOrderTranche?: LimitOrderTranche;

  constructor(data?: PartialMessage<QueryGetLimitOrderTrancheResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryGetLimitOrderTrancheResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit_order_tranche", kind: "message", T: LimitOrderTranche },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetLimitOrderTrancheResponse {
    return new QueryGetLimitOrderTrancheResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetLimitOrderTrancheResponse {
    return new QueryGetLimitOrderTrancheResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetLimitOrderTrancheResponse {
    return new QueryGetLimitOrderTrancheResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetLimitOrderTrancheResponse | PlainMessage<QueryGetLimitOrderTrancheResponse> | undefined, b: QueryGetLimitOrderTrancheResponse | PlainMessage<QueryGetLimitOrderTrancheResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetLimitOrderTrancheResponse, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryAllLimitOrderTrancheRequest
 */
export class QueryAllLimitOrderTrancheRequest extends Message<QueryAllLimitOrderTrancheRequest> {
  /**
   * @generated from field: string pair_id = 1;
   */
  pairId = "";

  /**
   * @generated from field: string token_in = 2;
   */
  tokenIn = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllLimitOrderTrancheRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryAllLimitOrderTrancheRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pair_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "token_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllLimitOrderTrancheRequest {
    return new QueryAllLimitOrderTrancheRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllLimitOrderTrancheRequest {
    return new QueryAllLimitOrderTrancheRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllLimitOrderTrancheRequest {
    return new QueryAllLimitOrderTrancheRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllLimitOrderTrancheRequest | PlainMessage<QueryAllLimitOrderTrancheRequest> | undefined, b: QueryAllLimitOrderTrancheRequest | PlainMessage<QueryAllLimitOrderTrancheRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllLimitOrderTrancheRequest, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryAllLimitOrderTrancheResponse
 */
export class QueryAllLimitOrderTrancheResponse extends Message<QueryAllLimitOrderTrancheResponse> {
  /**
   * @generated from field: repeated neutron.dex.LimitOrderTranche limit_order_tranche = 1;
   */
  limitOrderTranche: LimitOrderTranche[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllLimitOrderTrancheResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryAllLimitOrderTrancheResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit_order_tranche", kind: "message", T: LimitOrderTranche, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllLimitOrderTrancheResponse {
    return new QueryAllLimitOrderTrancheResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllLimitOrderTrancheResponse {
    return new QueryAllLimitOrderTrancheResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllLimitOrderTrancheResponse {
    return new QueryAllLimitOrderTrancheResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllLimitOrderTrancheResponse | PlainMessage<QueryAllLimitOrderTrancheResponse> | undefined, b: QueryAllLimitOrderTrancheResponse | PlainMessage<QueryAllLimitOrderTrancheResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllLimitOrderTrancheResponse, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryAllUserDepositsRequest
 */
export class QueryAllUserDepositsRequest extends Message<QueryAllUserDepositsRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  /**
   * @generated from field: bool include_pool_data = 3;
   */
  includePoolData = false;

  constructor(data?: PartialMessage<QueryAllUserDepositsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryAllUserDepositsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
    { no: 3, name: "include_pool_data", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllUserDepositsRequest {
    return new QueryAllUserDepositsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllUserDepositsRequest {
    return new QueryAllUserDepositsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllUserDepositsRequest {
    return new QueryAllUserDepositsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllUserDepositsRequest | PlainMessage<QueryAllUserDepositsRequest> | undefined, b: QueryAllUserDepositsRequest | PlainMessage<QueryAllUserDepositsRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllUserDepositsRequest, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryAllUserDepositsResponse
 */
export class QueryAllUserDepositsResponse extends Message<QueryAllUserDepositsResponse> {
  /**
   * @generated from field: repeated neutron.dex.DepositRecord deposits = 1;
   */
  deposits: DepositRecord[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllUserDepositsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryAllUserDepositsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deposits", kind: "message", T: DepositRecord, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllUserDepositsResponse {
    return new QueryAllUserDepositsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllUserDepositsResponse {
    return new QueryAllUserDepositsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllUserDepositsResponse {
    return new QueryAllUserDepositsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllUserDepositsResponse | PlainMessage<QueryAllUserDepositsResponse> | undefined, b: QueryAllUserDepositsResponse | PlainMessage<QueryAllUserDepositsResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllUserDepositsResponse, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryAllLimitOrderTrancheUserByAddressRequest
 */
export class QueryAllLimitOrderTrancheUserByAddressRequest extends Message<QueryAllLimitOrderTrancheUserByAddressRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllLimitOrderTrancheUserByAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryAllLimitOrderTrancheUserByAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllLimitOrderTrancheUserByAddressRequest {
    return new QueryAllLimitOrderTrancheUserByAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllLimitOrderTrancheUserByAddressRequest {
    return new QueryAllLimitOrderTrancheUserByAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllLimitOrderTrancheUserByAddressRequest {
    return new QueryAllLimitOrderTrancheUserByAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllLimitOrderTrancheUserByAddressRequest | PlainMessage<QueryAllLimitOrderTrancheUserByAddressRequest> | undefined, b: QueryAllLimitOrderTrancheUserByAddressRequest | PlainMessage<QueryAllLimitOrderTrancheUserByAddressRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllLimitOrderTrancheUserByAddressRequest, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryAllLimitOrderTrancheUserByAddressResponse
 */
export class QueryAllLimitOrderTrancheUserByAddressResponse extends Message<QueryAllLimitOrderTrancheUserByAddressResponse> {
  /**
   * @generated from field: repeated neutron.dex.LimitOrderTrancheUser limit_orders = 1;
   */
  limitOrders: LimitOrderTrancheUser[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllLimitOrderTrancheUserByAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryAllLimitOrderTrancheUserByAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit_orders", kind: "message", T: LimitOrderTrancheUser, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllLimitOrderTrancheUserByAddressResponse {
    return new QueryAllLimitOrderTrancheUserByAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllLimitOrderTrancheUserByAddressResponse {
    return new QueryAllLimitOrderTrancheUserByAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllLimitOrderTrancheUserByAddressResponse {
    return new QueryAllLimitOrderTrancheUserByAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllLimitOrderTrancheUserByAddressResponse | PlainMessage<QueryAllLimitOrderTrancheUserByAddressResponse> | undefined, b: QueryAllLimitOrderTrancheUserByAddressResponse | PlainMessage<QueryAllLimitOrderTrancheUserByAddressResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllLimitOrderTrancheUserByAddressResponse, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryAllTickLiquidityRequest
 */
export class QueryAllTickLiquidityRequest extends Message<QueryAllTickLiquidityRequest> {
  /**
   * @generated from field: string pair_id = 1;
   */
  pairId = "";

  /**
   * @generated from field: string token_in = 2;
   */
  tokenIn = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllTickLiquidityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryAllTickLiquidityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pair_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "token_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllTickLiquidityRequest {
    return new QueryAllTickLiquidityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllTickLiquidityRequest {
    return new QueryAllTickLiquidityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllTickLiquidityRequest {
    return new QueryAllTickLiquidityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllTickLiquidityRequest | PlainMessage<QueryAllTickLiquidityRequest> | undefined, b: QueryAllTickLiquidityRequest | PlainMessage<QueryAllTickLiquidityRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllTickLiquidityRequest, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryAllTickLiquidityResponse
 */
export class QueryAllTickLiquidityResponse extends Message<QueryAllTickLiquidityResponse> {
  /**
   * @generated from field: repeated neutron.dex.TickLiquidity tick_liquidity = 1;
   */
  tickLiquidity: TickLiquidity[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllTickLiquidityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryAllTickLiquidityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tick_liquidity", kind: "message", T: TickLiquidity, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllTickLiquidityResponse {
    return new QueryAllTickLiquidityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllTickLiquidityResponse {
    return new QueryAllTickLiquidityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllTickLiquidityResponse {
    return new QueryAllTickLiquidityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllTickLiquidityResponse | PlainMessage<QueryAllTickLiquidityResponse> | undefined, b: QueryAllTickLiquidityResponse | PlainMessage<QueryAllTickLiquidityResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllTickLiquidityResponse, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryGetInactiveLimitOrderTrancheRequest
 */
export class QueryGetInactiveLimitOrderTrancheRequest extends Message<QueryGetInactiveLimitOrderTrancheRequest> {
  /**
   * @generated from field: string pair_id = 1;
   */
  pairId = "";

  /**
   * @generated from field: string token_in = 2;
   */
  tokenIn = "";

  /**
   * @generated from field: int64 tick_index = 3;
   */
  tickIndex = protoInt64.zero;

  /**
   * @generated from field: string tranche_key = 4;
   */
  trancheKey = "";

  constructor(data?: PartialMessage<QueryGetInactiveLimitOrderTrancheRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryGetInactiveLimitOrderTrancheRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pair_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "token_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tick_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "tranche_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetInactiveLimitOrderTrancheRequest {
    return new QueryGetInactiveLimitOrderTrancheRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetInactiveLimitOrderTrancheRequest {
    return new QueryGetInactiveLimitOrderTrancheRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetInactiveLimitOrderTrancheRequest {
    return new QueryGetInactiveLimitOrderTrancheRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetInactiveLimitOrderTrancheRequest | PlainMessage<QueryGetInactiveLimitOrderTrancheRequest> | undefined, b: QueryGetInactiveLimitOrderTrancheRequest | PlainMessage<QueryGetInactiveLimitOrderTrancheRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetInactiveLimitOrderTrancheRequest, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryGetInactiveLimitOrderTrancheResponse
 */
export class QueryGetInactiveLimitOrderTrancheResponse extends Message<QueryGetInactiveLimitOrderTrancheResponse> {
  /**
   * @generated from field: neutron.dex.LimitOrderTranche inactive_limit_order_tranche = 1;
   */
  inactiveLimitOrderTranche?: LimitOrderTranche;

  constructor(data?: PartialMessage<QueryGetInactiveLimitOrderTrancheResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryGetInactiveLimitOrderTrancheResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "inactive_limit_order_tranche", kind: "message", T: LimitOrderTranche },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetInactiveLimitOrderTrancheResponse {
    return new QueryGetInactiveLimitOrderTrancheResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetInactiveLimitOrderTrancheResponse {
    return new QueryGetInactiveLimitOrderTrancheResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetInactiveLimitOrderTrancheResponse {
    return new QueryGetInactiveLimitOrderTrancheResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetInactiveLimitOrderTrancheResponse | PlainMessage<QueryGetInactiveLimitOrderTrancheResponse> | undefined, b: QueryGetInactiveLimitOrderTrancheResponse | PlainMessage<QueryGetInactiveLimitOrderTrancheResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetInactiveLimitOrderTrancheResponse, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryAllInactiveLimitOrderTrancheRequest
 */
export class QueryAllInactiveLimitOrderTrancheRequest extends Message<QueryAllInactiveLimitOrderTrancheRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllInactiveLimitOrderTrancheRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryAllInactiveLimitOrderTrancheRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllInactiveLimitOrderTrancheRequest {
    return new QueryAllInactiveLimitOrderTrancheRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllInactiveLimitOrderTrancheRequest {
    return new QueryAllInactiveLimitOrderTrancheRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllInactiveLimitOrderTrancheRequest {
    return new QueryAllInactiveLimitOrderTrancheRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllInactiveLimitOrderTrancheRequest | PlainMessage<QueryAllInactiveLimitOrderTrancheRequest> | undefined, b: QueryAllInactiveLimitOrderTrancheRequest | PlainMessage<QueryAllInactiveLimitOrderTrancheRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllInactiveLimitOrderTrancheRequest, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryAllInactiveLimitOrderTrancheResponse
 */
export class QueryAllInactiveLimitOrderTrancheResponse extends Message<QueryAllInactiveLimitOrderTrancheResponse> {
  /**
   * @generated from field: repeated neutron.dex.LimitOrderTranche inactive_limit_order_tranche = 1;
   */
  inactiveLimitOrderTranche: LimitOrderTranche[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllInactiveLimitOrderTrancheResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryAllInactiveLimitOrderTrancheResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "inactive_limit_order_tranche", kind: "message", T: LimitOrderTranche, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllInactiveLimitOrderTrancheResponse {
    return new QueryAllInactiveLimitOrderTrancheResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllInactiveLimitOrderTrancheResponse {
    return new QueryAllInactiveLimitOrderTrancheResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllInactiveLimitOrderTrancheResponse {
    return new QueryAllInactiveLimitOrderTrancheResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllInactiveLimitOrderTrancheResponse | PlainMessage<QueryAllInactiveLimitOrderTrancheResponse> | undefined, b: QueryAllInactiveLimitOrderTrancheResponse | PlainMessage<QueryAllInactiveLimitOrderTrancheResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllInactiveLimitOrderTrancheResponse, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryAllPoolReservesRequest
 */
export class QueryAllPoolReservesRequest extends Message<QueryAllPoolReservesRequest> {
  /**
   * @generated from field: string pair_id = 1;
   */
  pairId = "";

  /**
   * @generated from field: string token_in = 2;
   */
  tokenIn = "";

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 3;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllPoolReservesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryAllPoolReservesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pair_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "token_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllPoolReservesRequest {
    return new QueryAllPoolReservesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllPoolReservesRequest {
    return new QueryAllPoolReservesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllPoolReservesRequest {
    return new QueryAllPoolReservesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllPoolReservesRequest | PlainMessage<QueryAllPoolReservesRequest> | undefined, b: QueryAllPoolReservesRequest | PlainMessage<QueryAllPoolReservesRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllPoolReservesRequest, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryAllPoolReservesResponse
 */
export class QueryAllPoolReservesResponse extends Message<QueryAllPoolReservesResponse> {
  /**
   * @generated from field: repeated neutron.dex.PoolReserves pool_reserves = 1;
   */
  poolReserves: PoolReserves[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllPoolReservesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryAllPoolReservesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_reserves", kind: "message", T: PoolReserves, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllPoolReservesResponse {
    return new QueryAllPoolReservesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllPoolReservesResponse {
    return new QueryAllPoolReservesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllPoolReservesResponse {
    return new QueryAllPoolReservesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllPoolReservesResponse | PlainMessage<QueryAllPoolReservesResponse> | undefined, b: QueryAllPoolReservesResponse | PlainMessage<QueryAllPoolReservesResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllPoolReservesResponse, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryGetPoolReservesRequest
 */
export class QueryGetPoolReservesRequest extends Message<QueryGetPoolReservesRequest> {
  /**
   * @generated from field: string pair_id = 1;
   */
  pairId = "";

  /**
   * @generated from field: string token_in = 2;
   */
  tokenIn = "";

  /**
   * @generated from field: int64 tick_index = 3;
   */
  tickIndex = protoInt64.zero;

  /**
   * @generated from field: uint64 fee = 4;
   */
  fee = protoInt64.zero;

  constructor(data?: PartialMessage<QueryGetPoolReservesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryGetPoolReservesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pair_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "token_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tick_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "fee", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetPoolReservesRequest {
    return new QueryGetPoolReservesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetPoolReservesRequest {
    return new QueryGetPoolReservesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetPoolReservesRequest {
    return new QueryGetPoolReservesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetPoolReservesRequest | PlainMessage<QueryGetPoolReservesRequest> | undefined, b: QueryGetPoolReservesRequest | PlainMessage<QueryGetPoolReservesRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetPoolReservesRequest, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryGetPoolReservesResponse
 */
export class QueryGetPoolReservesResponse extends Message<QueryGetPoolReservesResponse> {
  /**
   * @generated from field: neutron.dex.PoolReserves pool_reserves = 1;
   */
  poolReserves?: PoolReserves;

  constructor(data?: PartialMessage<QueryGetPoolReservesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryGetPoolReservesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_reserves", kind: "message", T: PoolReserves },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetPoolReservesResponse {
    return new QueryGetPoolReservesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetPoolReservesResponse {
    return new QueryGetPoolReservesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetPoolReservesResponse {
    return new QueryGetPoolReservesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetPoolReservesResponse | PlainMessage<QueryGetPoolReservesResponse> | undefined, b: QueryGetPoolReservesResponse | PlainMessage<QueryGetPoolReservesResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetPoolReservesResponse, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryEstimateMultiHopSwapRequest
 */
export class QueryEstimateMultiHopSwapRequest extends Message<QueryEstimateMultiHopSwapRequest> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string receiver = 2;
   */
  receiver = "";

  /**
   * @generated from field: repeated neutron.dex.MultiHopRoute routes = 3;
   */
  routes: MultiHopRoute[] = [];

  /**
   * @generated from field: string amount_in = 4;
   */
  amountIn = "";

  /**
   * @generated from field: string exit_limit_price = 5;
   */
  exitLimitPrice = "";

  /**
   * If pickBestRoute == true then all routes are run and the route with the
   * best price is chosen otherwise, the first succesful route is used.
   *
   * @generated from field: bool pick_best_route = 6;
   */
  pickBestRoute = false;

  constructor(data?: PartialMessage<QueryEstimateMultiHopSwapRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryEstimateMultiHopSwapRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "receiver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "routes", kind: "message", T: MultiHopRoute, repeated: true },
    { no: 4, name: "amount_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "exit_limit_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "pick_best_route", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEstimateMultiHopSwapRequest {
    return new QueryEstimateMultiHopSwapRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEstimateMultiHopSwapRequest {
    return new QueryEstimateMultiHopSwapRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEstimateMultiHopSwapRequest {
    return new QueryEstimateMultiHopSwapRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEstimateMultiHopSwapRequest | PlainMessage<QueryEstimateMultiHopSwapRequest> | undefined, b: QueryEstimateMultiHopSwapRequest | PlainMessage<QueryEstimateMultiHopSwapRequest> | undefined): boolean {
    return proto3.util.equals(QueryEstimateMultiHopSwapRequest, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryEstimateMultiHopSwapResponse
 */
export class QueryEstimateMultiHopSwapResponse extends Message<QueryEstimateMultiHopSwapResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin coin_out = 1;
   */
  coinOut?: Coin;

  constructor(data?: PartialMessage<QueryEstimateMultiHopSwapResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryEstimateMultiHopSwapResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coin_out", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEstimateMultiHopSwapResponse {
    return new QueryEstimateMultiHopSwapResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEstimateMultiHopSwapResponse {
    return new QueryEstimateMultiHopSwapResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEstimateMultiHopSwapResponse {
    return new QueryEstimateMultiHopSwapResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEstimateMultiHopSwapResponse | PlainMessage<QueryEstimateMultiHopSwapResponse> | undefined, b: QueryEstimateMultiHopSwapResponse | PlainMessage<QueryEstimateMultiHopSwapResponse> | undefined): boolean {
    return proto3.util.equals(QueryEstimateMultiHopSwapResponse, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryEstimatePlaceLimitOrderRequest
 */
export class QueryEstimatePlaceLimitOrderRequest extends Message<QueryEstimatePlaceLimitOrderRequest> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string receiver = 2;
   */
  receiver = "";

  /**
   * @generated from field: string token_in = 3;
   */
  tokenIn = "";

  /**
   * @generated from field: string token_out = 4;
   */
  tokenOut = "";

  /**
   * @generated from field: int64 tick_index_in_to_out = 5;
   */
  tickIndexInToOut = protoInt64.zero;

  /**
   * @generated from field: string amount_in = 6;
   */
  amountIn = "";

  /**
   * @generated from field: neutron.dex.LimitOrderType order_type = 7;
   */
  orderType = LimitOrderType.GOOD_TIL_CANCELLED;

  /**
   * expirationTime is only valid iff orderType == GOOD_TIL_TIME.
   *
   * @generated from field: google.protobuf.Timestamp expiration_time = 8;
   */
  expirationTime?: Timestamp;

  /**
   * @generated from field: string maxAmount_out = 9;
   */
  maxAmountOut = "";

  constructor(data?: PartialMessage<QueryEstimatePlaceLimitOrderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryEstimatePlaceLimitOrderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "receiver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "token_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "token_out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "tick_index_in_to_out", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "amount_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "order_type", kind: "enum", T: proto3.getEnumType(LimitOrderType) },
    { no: 8, name: "expiration_time", kind: "message", T: Timestamp },
    { no: 9, name: "maxAmount_out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEstimatePlaceLimitOrderRequest {
    return new QueryEstimatePlaceLimitOrderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEstimatePlaceLimitOrderRequest {
    return new QueryEstimatePlaceLimitOrderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEstimatePlaceLimitOrderRequest {
    return new QueryEstimatePlaceLimitOrderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEstimatePlaceLimitOrderRequest | PlainMessage<QueryEstimatePlaceLimitOrderRequest> | undefined, b: QueryEstimatePlaceLimitOrderRequest | PlainMessage<QueryEstimatePlaceLimitOrderRequest> | undefined): boolean {
    return proto3.util.equals(QueryEstimatePlaceLimitOrderRequest, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryEstimatePlaceLimitOrderResponse
 */
export class QueryEstimatePlaceLimitOrderResponse extends Message<QueryEstimatePlaceLimitOrderResponse> {
  /**
   * Total amount of coin used for the limit order
   * You can derive makerLimitInCoin using the equation: totalInCoin =
   * swapInCoin + makerLimitInCoin
   *
   * @generated from field: cosmos.base.v1beta1.Coin total_in_coin = 1;
   */
  totalInCoin?: Coin;

  /**
   * Total amount of the token in that was immediately swapped for swapOutCoin
   *
   * @generated from field: cosmos.base.v1beta1.Coin swap_in_coin = 2;
   */
  swapInCoin?: Coin;

  /**
   * Total amount of coin received from the taker portion of the limit order
   * This is the amount of coin immediately available in the users account after
   * executing the limit order. It does not include any future proceeds from the
   * maker portion which will have withdrawn in the future
   *
   * @generated from field: cosmos.base.v1beta1.Coin swap_out_coin = 3;
   */
  swapOutCoin?: Coin;

  constructor(data?: PartialMessage<QueryEstimatePlaceLimitOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryEstimatePlaceLimitOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_in_coin", kind: "message", T: Coin },
    { no: 2, name: "swap_in_coin", kind: "message", T: Coin },
    { no: 3, name: "swap_out_coin", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryEstimatePlaceLimitOrderResponse {
    return new QueryEstimatePlaceLimitOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryEstimatePlaceLimitOrderResponse {
    return new QueryEstimatePlaceLimitOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryEstimatePlaceLimitOrderResponse {
    return new QueryEstimatePlaceLimitOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryEstimatePlaceLimitOrderResponse | PlainMessage<QueryEstimatePlaceLimitOrderResponse> | undefined, b: QueryEstimatePlaceLimitOrderResponse | PlainMessage<QueryEstimatePlaceLimitOrderResponse> | undefined): boolean {
    return proto3.util.equals(QueryEstimatePlaceLimitOrderResponse, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryPoolRequest
 */
export class QueryPoolRequest extends Message<QueryPoolRequest> {
  /**
   * @generated from field: string pair_id = 1;
   */
  pairId = "";

  /**
   * @generated from field: int64 tick_index = 2;
   */
  tickIndex = protoInt64.zero;

  /**
   * @generated from field: uint64 fee = 3;
   */
  fee = protoInt64.zero;

  constructor(data?: PartialMessage<QueryPoolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryPoolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pair_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tick_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "fee", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolRequest {
    return new QueryPoolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolRequest {
    return new QueryPoolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolRequest {
    return new QueryPoolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolRequest | PlainMessage<QueryPoolRequest> | undefined, b: QueryPoolRequest | PlainMessage<QueryPoolRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolRequest, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryPoolByIDRequest
 */
export class QueryPoolByIDRequest extends Message<QueryPoolByIDRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<QueryPoolByIDRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryPoolByIDRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolByIDRequest {
    return new QueryPoolByIDRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolByIDRequest {
    return new QueryPoolByIDRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolByIDRequest {
    return new QueryPoolByIDRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolByIDRequest | PlainMessage<QueryPoolByIDRequest> | undefined, b: QueryPoolByIDRequest | PlainMessage<QueryPoolByIDRequest> | undefined): boolean {
    return proto3.util.equals(QueryPoolByIDRequest, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryPoolResponse
 */
export class QueryPoolResponse extends Message<QueryPoolResponse> {
  /**
   * @generated from field: neutron.dex.Pool pool = 1;
   */
  pool?: Pool;

  constructor(data?: PartialMessage<QueryPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: Pool },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryPoolResponse {
    return new QueryPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryPoolResponse {
    return new QueryPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryPoolResponse {
    return new QueryPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryPoolResponse | PlainMessage<QueryPoolResponse> | undefined, b: QueryPoolResponse | PlainMessage<QueryPoolResponse> | undefined): boolean {
    return proto3.util.equals(QueryPoolResponse, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryGetPoolMetadataRequest
 */
export class QueryGetPoolMetadataRequest extends Message<QueryGetPoolMetadataRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<QueryGetPoolMetadataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryGetPoolMetadataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetPoolMetadataRequest {
    return new QueryGetPoolMetadataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetPoolMetadataRequest {
    return new QueryGetPoolMetadataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetPoolMetadataRequest {
    return new QueryGetPoolMetadataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetPoolMetadataRequest | PlainMessage<QueryGetPoolMetadataRequest> | undefined, b: QueryGetPoolMetadataRequest | PlainMessage<QueryGetPoolMetadataRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetPoolMetadataRequest, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryGetPoolMetadataResponse
 */
export class QueryGetPoolMetadataResponse extends Message<QueryGetPoolMetadataResponse> {
  /**
   * @generated from field: neutron.dex.PoolMetadata pool_metadata = 1;
   */
  poolMetadata?: PoolMetadata;

  constructor(data?: PartialMessage<QueryGetPoolMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryGetPoolMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_metadata", kind: "message", T: PoolMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetPoolMetadataResponse {
    return new QueryGetPoolMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetPoolMetadataResponse {
    return new QueryGetPoolMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetPoolMetadataResponse {
    return new QueryGetPoolMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetPoolMetadataResponse | PlainMessage<QueryGetPoolMetadataResponse> | undefined, b: QueryGetPoolMetadataResponse | PlainMessage<QueryGetPoolMetadataResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetPoolMetadataResponse, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryAllPoolMetadataRequest
 */
export class QueryAllPoolMetadataRequest extends Message<QueryAllPoolMetadataRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllPoolMetadataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryAllPoolMetadataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllPoolMetadataRequest {
    return new QueryAllPoolMetadataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllPoolMetadataRequest {
    return new QueryAllPoolMetadataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllPoolMetadataRequest {
    return new QueryAllPoolMetadataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllPoolMetadataRequest | PlainMessage<QueryAllPoolMetadataRequest> | undefined, b: QueryAllPoolMetadataRequest | PlainMessage<QueryAllPoolMetadataRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllPoolMetadataRequest, a, b);
  }
}

/**
 * @generated from message neutron.dex.QueryAllPoolMetadataResponse
 */
export class QueryAllPoolMetadataResponse extends Message<QueryAllPoolMetadataResponse> {
  /**
   * @generated from field: repeated neutron.dex.PoolMetadata pool_metadata = 1;
   */
  poolMetadata: PoolMetadata[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllPoolMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.QueryAllPoolMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_metadata", kind: "message", T: PoolMetadata, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllPoolMetadataResponse {
    return new QueryAllPoolMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllPoolMetadataResponse {
    return new QueryAllPoolMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllPoolMetadataResponse {
    return new QueryAllPoolMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllPoolMetadataResponse | PlainMessage<QueryAllPoolMetadataResponse> | undefined, b: QueryAllPoolMetadataResponse | PlainMessage<QueryAllPoolMetadataResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllPoolMetadataResponse, a, b);
  }
}

