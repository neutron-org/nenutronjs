// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file neutron/dex/pool_reserves.proto (package neutron.dex, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { TradePairID } from "./trade_pair_id_pb.js";

/**
 * @generated from message neutron.dex.PoolReservesKey
 */
export class PoolReservesKey extends Message<PoolReservesKey> {
  /**
   * @generated from field: neutron.dex.TradePairID trade_pair_id = 1;
   */
  tradePairId?: TradePairID;

  /**
   * @generated from field: int64 tick_index_taker_to_maker = 2;
   */
  tickIndexTakerToMaker = protoInt64.zero;

  /**
   * @generated from field: uint64 fee = 3;
   */
  fee = protoInt64.zero;

  constructor(data?: PartialMessage<PoolReservesKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.PoolReservesKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trade_pair_id", kind: "message", T: TradePairID },
    { no: 2, name: "tick_index_taker_to_maker", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "fee", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolReservesKey {
    return new PoolReservesKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolReservesKey {
    return new PoolReservesKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolReservesKey {
    return new PoolReservesKey().fromJsonString(jsonString, options);
  }

  static equals(a: PoolReservesKey | PlainMessage<PoolReservesKey> | undefined, b: PoolReservesKey | PlainMessage<PoolReservesKey> | undefined): boolean {
    return proto3.util.equals(PoolReservesKey, a, b);
  }
}

/**
 * @generated from message neutron.dex.PoolReserves
 */
export class PoolReserves extends Message<PoolReserves> {
  /**
   * @generated from field: neutron.dex.PoolReservesKey key = 1;
   */
  key?: PoolReservesKey;

  /**
   * @generated from field: string reserves_maker_denom = 2;
   */
  reservesMakerDenom = "";

  /**
   * @generated from field: string price_taker_to_maker = 3;
   */
  priceTakerToMaker = "";

  /**
   * @generated from field: string price_opposite_taker_to_maker = 4;
   */
  priceOppositeTakerToMaker = "";

  constructor(data?: PartialMessage<PoolReserves>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.PoolReserves";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "message", T: PoolReservesKey },
    { no: 2, name: "reserves_maker_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "price_taker_to_maker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "price_opposite_taker_to_maker", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolReserves {
    return new PoolReserves().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolReserves {
    return new PoolReserves().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolReserves {
    return new PoolReserves().fromJsonString(jsonString, options);
  }

  static equals(a: PoolReserves | PlainMessage<PoolReserves> | undefined, b: PoolReserves | PlainMessage<PoolReserves> | undefined): boolean {
    return proto3.util.equals(PoolReserves, a, b);
  }
}

