// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file neutron/contractmanager/failure.proto (package neutron.contractmanager, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * Failure message contains information about ACK failures and can be used to
 * replay ACK in case of requirement.
 * Note that Failure means that sudo handler to cosmwasm contract failed for
 * some reason
 *
 * @generated from message neutron.contractmanager.Failure
 */
export class Failure extends Message<Failure> {
  /**
   * Address of the failed contract
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * Id of the failure under specific address
   *
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * Serialized MessageSudoCallback with Packet and Ack(if exists)
   *
   * @generated from field: bytes sudo_payload = 3;
   */
  sudoPayload = new Uint8Array(0);

  /**
   * Redacted error response of the sudo call. Full error is emitted as an event
   *
   * @generated from field: string error = 4;
   */
  error = "";

  constructor(data?: PartialMessage<Failure>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.contractmanager.Failure";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "sudo_payload", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Failure {
    return new Failure().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Failure {
    return new Failure().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Failure {
    return new Failure().fromJsonString(jsonString, options);
  }

  static equals(a: Failure | PlainMessage<Failure> | undefined, b: Failure | PlainMessage<Failure> | undefined): boolean {
    return proto3.util.equals(Failure, a, b);
  }
}

