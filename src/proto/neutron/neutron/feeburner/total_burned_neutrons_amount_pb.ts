// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file neutron/feeburner/total_burned_neutrons_amount.proto (package neutron.feeburner, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";

/**
 * TotalBurnedNeutronsAmount defines total amount of burned neutron fees
 *
 * @generated from message neutron.feeburner.TotalBurnedNeutronsAmount
 */
export class TotalBurnedNeutronsAmount extends Message<TotalBurnedNeutronsAmount> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin coin = 1;
   */
  coin?: Coin;

  constructor(data?: PartialMessage<TotalBurnedNeutronsAmount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.feeburner.TotalBurnedNeutronsAmount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coin", kind: "message", T: Coin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TotalBurnedNeutronsAmount {
    return new TotalBurnedNeutronsAmount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TotalBurnedNeutronsAmount {
    return new TotalBurnedNeutronsAmount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TotalBurnedNeutronsAmount {
    return new TotalBurnedNeutronsAmount().fromJsonString(jsonString, options);
  }

  static equals(a: TotalBurnedNeutronsAmount | PlainMessage<TotalBurnedNeutronsAmount> | undefined, b: TotalBurnedNeutronsAmount | PlainMessage<TotalBurnedNeutronsAmount> | undefined): boolean {
    return proto3.util.equals(TotalBurnedNeutronsAmount, a, b);
  }
}

