// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file slinky/abci/v1/vote_extensions.proto (package slinky.abci.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * OracleVoteExtension defines the vote extension structure for oracle prices.
 *
 * @generated from message slinky.abci.v1.OracleVoteExtension
 */
export class OracleVoteExtension extends Message<OracleVoteExtension> {
  /**
   * Prices defines a map of id(CurrencyPair) -> price.Bytes() . i.e. 1 ->
   * 0x123.. (bytes). Notice the `id` function is determined by the
   * `CurrencyPairIDStrategy` used in the VoteExtensionHandler.
   *
   * @generated from field: map<uint64, bytes> prices = 1;
   */
  prices: { [key: string]: Uint8Array } = {};

  constructor(data?: PartialMessage<OracleVoteExtension>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.abci.v1.OracleVoteExtension";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prices", kind: "map", K: 4 /* ScalarType.UINT64 */, V: {kind: "scalar", T: 12 /* ScalarType.BYTES */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OracleVoteExtension {
    return new OracleVoteExtension().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OracleVoteExtension {
    return new OracleVoteExtension().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OracleVoteExtension {
    return new OracleVoteExtension().fromJsonString(jsonString, options);
  }

  static equals(a: OracleVoteExtension | PlainMessage<OracleVoteExtension> | undefined, b: OracleVoteExtension | PlainMessage<OracleVoteExtension> | undefined): boolean {
    return proto3.util.equals(OracleVoteExtension, a, b);
  }
}

