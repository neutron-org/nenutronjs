// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file slinky/sla/v1/genesis.proto (package slinky.sla.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { CurrencyPair } from "../../types/v1/currency_pair_pb.js";

/**
 * GenesisState defines the sla module's genesis state.
 *
 * @generated from message slinky.sla.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * SLAs are the SLAs that are currently active.
   *
   * @generated from field: repeated slinky.sla.v1.PriceFeedSLA slas = 1;
   */
  slas: PriceFeedSLA[] = [];

  /**
   * PrceFeeds are the price feeds that are currently active.
   *
   * @generated from field: repeated slinky.sla.v1.PriceFeed price_feeds = 2;
   */
  priceFeeds: PriceFeed[] = [];

  /**
   * Params are the parameters for the sla module.
   *
   * @generated from field: slinky.sla.v1.Params params = 3;
   */
  params?: Params;

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.sla.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "slas", kind: "message", T: PriceFeedSLA, repeated: true },
    { no: 2, name: "price_feeds", kind: "message", T: PriceFeed, repeated: true },
    { no: 3, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * Params defines the parameters for the sla module.
 *
 * @generated from message slinky.sla.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * Enabled is a flag to enable or disable the sla module.
   *
   * @generated from field: bool enabled = 1;
   */
  enabled = false;

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.sla.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * PriceFeedSLA defines the the desired SLA for a given set of price feeds. A
 * price feed is defined to be a set of price prices for the same (currency
 * pair, validator).
 *
 * @generated from message slinky.sla.v1.PriceFeedSLA
 */
export class PriceFeedSLA extends Message<PriceFeedSLA> {
  /**
   * MaximumViableWindow is the maximum time window that we are interested
   * for the SLA. This is used to determine the moving window of blocks that
   * we are interested in.
   *
   * @generated from field: uint64 maximum_viable_window = 1;
   */
  maximumViableWindow = protoInt64.zero;

  /**
   * ExpectedUptime is the expected uptime for the given validator and price
   * feed.
   *
   * @generated from field: string expected_uptime = 2;
   */
  expectedUptime = "";

  /**
   * SlashConstant is the constant by which we will multiply the deviation from
   * the expected uptime.
   *
   * @generated from field: string slash_constant = 3;
   */
  slashConstant = "";

  /**
   * MinimumBlockUpdates is the minimum number of blocks that the
   * validator had to have voted on in the maximum viable window
   * in order to be considered for the SLA.
   *
   * @generated from field: uint64 minimum_block_updates = 4;
   */
  minimumBlockUpdates = protoInt64.zero;

  /**
   * Frequency is the frequency at which we will check the SLA.
   *
   * @generated from field: uint64 frequency = 5;
   */
  frequency = protoInt64.zero;

  /**
   * ID is the unique identifier for the SLA.
   *
   * @generated from field: string id = 6;
   */
  id = "";

  constructor(data?: PartialMessage<PriceFeedSLA>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.sla.v1.PriceFeedSLA";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "maximum_viable_window", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "expected_uptime", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slash_constant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "minimum_block_updates", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "frequency", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 6, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PriceFeedSLA {
    return new PriceFeedSLA().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PriceFeedSLA {
    return new PriceFeedSLA().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PriceFeedSLA {
    return new PriceFeedSLA().fromJsonString(jsonString, options);
  }

  static equals(a: PriceFeedSLA | PlainMessage<PriceFeedSLA> | undefined, b: PriceFeedSLA | PlainMessage<PriceFeedSLA> | undefined): boolean {
    return proto3.util.equals(PriceFeedSLA, a, b);
  }
}

/**
 * PriceFeed defines the object type that will be utilized to monitor how
 * frequently validators are voting with price updates across the network.
 *
 * @generated from message slinky.sla.v1.PriceFeed
 */
export class PriceFeed extends Message<PriceFeed> {
  /**
   * UpdateMap represents the relevant moving window of price feed updates.
   *
   * @generated from field: bytes update_map = 1;
   */
  updateMap = new Uint8Array(0);

  /**
   * InclusionMap represents the relevant moving window of blocks that the
   * validator has voted on.
   *
   * @generated from field: bytes inclusion_map = 2;
   */
  inclusionMap = new Uint8Array(0);

  /**
   * Index corresponds to the current index into the bitmap.
   *
   * @generated from field: uint64 index = 3;
   */
  index = protoInt64.zero;

  /**
   * Validator represents the validator that this SLA corresponds to.
   *
   * @generated from field: bytes validator = 4;
   */
  validator = new Uint8Array(0);

  /**
   * CurrencyPair represents the currency pair that this SLA corresponds to.
   *
   * @generated from field: slinky.types.v1.CurrencyPair currency_pair = 5;
   */
  currencyPair?: CurrencyPair;

  /**
   * MaximumViableWindow represents the maximum number of blocks that can be
   * represented by the bit map.
   *
   * @generated from field: uint64 maximum_viable_window = 6;
   */
  maximumViableWindow = protoInt64.zero;

  /**
   * ID corresponds to the SLA ID that this price feed corresponds to.
   *
   * @generated from field: string id = 7;
   */
  id = "";

  constructor(data?: PartialMessage<PriceFeed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.sla.v1.PriceFeed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "update_map", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "inclusion_map", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 3, name: "index", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "validator", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "currency_pair", kind: "message", T: CurrencyPair },
    { no: 6, name: "maximum_viable_window", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PriceFeed {
    return new PriceFeed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PriceFeed {
    return new PriceFeed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PriceFeed {
    return new PriceFeed().fromJsonString(jsonString, options);
  }

  static equals(a: PriceFeed | PlainMessage<PriceFeed> | undefined, b: PriceFeed | PlainMessage<PriceFeed> | undefined): boolean {
    return proto3.util.equals(PriceFeed, a, b);
  }
}

