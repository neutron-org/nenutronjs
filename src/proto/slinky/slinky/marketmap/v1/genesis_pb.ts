// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file slinky/marketmap/v1/genesis.proto (package slinky.marketmap.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { MarketMap } from "./market_pb.js";
import { Params } from "./params_pb.js";

/**
 * GenesisState defines the x/marketmap module's genesis state.
 *
 * @generated from message slinky.marketmap.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * MarketMap defines the global set of market configurations for all providers
   * and markets.
   *
   * @generated from field: slinky.marketmap.v1.MarketMap market_map = 1;
   */
  marketMap?: MarketMap;

  /**
   * LastUpdated is the last block height that the market map was updated.
   * This field can be used as an optimization for clients checking if there
   * is a new update to the map.
   *
   * @generated from field: uint64 last_updated = 2;
   */
  lastUpdated = protoInt64.zero;

  /**
   * Params are the parameters for the x/marketmap module.
   *
   * @generated from field: slinky.marketmap.v1.Params params = 3;
   */
  params?: Params;

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.marketmap.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "market_map", kind: "message", T: MarketMap },
    { no: 2, name: "last_updated", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

