// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file slinky/marketmap/v1/tx.proto (package slinky.marketmap.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Paths, Providers, Ticker } from "./market_pb.js";
import { Params } from "./params_pb.js";

/**
 * CreateMarket contains all information needed to create a new market.
 *
 * @generated from message slinky.marketmap.v1.CreateMarket
 */
export class CreateMarket extends Message<CreateMarket> {
  /**
   * Ticker is the on-chain representation of the ticker. This is the target
   * ticker that the prices of the set of tickers will be converted to.
   *
   * @generated from field: slinky.marketmap.v1.Ticker ticker = 1;
   */
  ticker?: Ticker;

  /**
   * Providers maps provider names to their off-chain
   * representations for the given ticker of the message.
   *
   * @generated from field: slinky.marketmap.v1.Providers providers = 2;
   */
  providers?: Providers;

  /**
   * Paths is the list of convertable markets that will be used to convert the
   * prices of a set of tickers to a common ticker.
   *
   * @generated from field: slinky.marketmap.v1.Paths paths = 3;
   */
  paths?: Paths;

  constructor(data?: PartialMessage<CreateMarket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.marketmap.v1.CreateMarket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ticker", kind: "message", T: Ticker },
    { no: 2, name: "providers", kind: "message", T: Providers },
    { no: 3, name: "paths", kind: "message", T: Paths },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateMarket {
    return new CreateMarket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateMarket {
    return new CreateMarket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateMarket {
    return new CreateMarket().fromJsonString(jsonString, options);
  }

  static equals(a: CreateMarket | PlainMessage<CreateMarket> | undefined, b: CreateMarket | PlainMessage<CreateMarket> | undefined): boolean {
    return proto3.util.equals(CreateMarket, a, b);
  }
}

/**
 * MsgUpdateMarketMap defines a message carrying a payload for updating the
 * x/marketmap module.
 *
 * @generated from message slinky.marketmap.v1.MsgUpdateMarketMap
 */
export class MsgUpdateMarketMap extends Message<MsgUpdateMarketMap> {
  /**
   * Signer is the signer of this transaction.
   *
   * @generated from field: string signer = 1;
   */
  signer = "";

  /**
   * CreateMarkets is the list of all markets to be created for the given
   * transaction.
   *
   * @generated from field: repeated slinky.marketmap.v1.CreateMarket create_markets = 2;
   */
  createMarkets: CreateMarket[] = [];

  constructor(data?: PartialMessage<MsgUpdateMarketMap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.marketmap.v1.MsgUpdateMarketMap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "signer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "create_markets", kind: "message", T: CreateMarket, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateMarketMap {
    return new MsgUpdateMarketMap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateMarketMap {
    return new MsgUpdateMarketMap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateMarketMap {
    return new MsgUpdateMarketMap().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateMarketMap | PlainMessage<MsgUpdateMarketMap> | undefined, b: MsgUpdateMarketMap | PlainMessage<MsgUpdateMarketMap> | undefined): boolean {
    return proto3.util.equals(MsgUpdateMarketMap, a, b);
  }
}

/**
 * MsgUpdateMarketMapResponse is the response message for MsgUpdateMarketMap.
 *
 * @generated from message slinky.marketmap.v1.MsgUpdateMarketMapResponse
 */
export class MsgUpdateMarketMapResponse extends Message<MsgUpdateMarketMapResponse> {
  constructor(data?: PartialMessage<MsgUpdateMarketMapResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.marketmap.v1.MsgUpdateMarketMapResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateMarketMapResponse {
    return new MsgUpdateMarketMapResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateMarketMapResponse {
    return new MsgUpdateMarketMapResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateMarketMapResponse {
    return new MsgUpdateMarketMapResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateMarketMapResponse | PlainMessage<MsgUpdateMarketMapResponse> | undefined, b: MsgUpdateMarketMapResponse | PlainMessage<MsgUpdateMarketMapResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateMarketMapResponse, a, b);
  }
}

/**
 * MsgParams defines the Msg/Params request type. It contains the
 * new parameters for the x/marketmap module.
 *
 * @generated from message slinky.marketmap.v1.MsgParams
 */
export class MsgParams extends Message<MsgParams> {
  /**
   * Params defines the new parameters for the x/marketmap module.
   *
   * @generated from field: slinky.marketmap.v1.Params params = 1;
   */
  params?: Params;

  /**
   * Authority defines the authority that is updating the x/marketmap module
   * parameters.
   *
   * @generated from field: string authority = 2;
   */
  authority = "";

  constructor(data?: PartialMessage<MsgParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.marketmap.v1.MsgParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgParams {
    return new MsgParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgParams {
    return new MsgParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgParams {
    return new MsgParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgParams | PlainMessage<MsgParams> | undefined, b: MsgParams | PlainMessage<MsgParams> | undefined): boolean {
    return proto3.util.equals(MsgParams, a, b);
  }
}

/**
 * MsgParamsResponse defines the Msg/Params response type.
 *
 * @generated from message slinky.marketmap.v1.MsgParamsResponse
 */
export class MsgParamsResponse extends Message<MsgParamsResponse> {
  constructor(data?: PartialMessage<MsgParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.marketmap.v1.MsgParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgParamsResponse {
    return new MsgParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgParamsResponse {
    return new MsgParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgParamsResponse {
    return new MsgParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgParamsResponse | PlainMessage<MsgParamsResponse> | undefined, b: MsgParamsResponse | PlainMessage<MsgParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgParamsResponse, a, b);
  }
}

