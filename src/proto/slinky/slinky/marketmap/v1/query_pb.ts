// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file slinky/marketmap/v1/query.proto (package slinky.marketmap.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { MarketMap } from "./market_pb.js";
import { Params } from "./params_pb.js";

/**
 * GetMarketMapRequest is the query request for the GetMarketMap query.
 * It takes no arguments.
 *
 * @generated from message slinky.marketmap.v1.GetMarketMapRequest
 */
export class GetMarketMapRequest extends Message<GetMarketMapRequest> {
  constructor(data?: PartialMessage<GetMarketMapRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.marketmap.v1.GetMarketMapRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMarketMapRequest {
    return new GetMarketMapRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMarketMapRequest {
    return new GetMarketMapRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMarketMapRequest {
    return new GetMarketMapRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMarketMapRequest | PlainMessage<GetMarketMapRequest> | undefined, b: GetMarketMapRequest | PlainMessage<GetMarketMapRequest> | undefined): boolean {
    return proto3.util.equals(GetMarketMapRequest, a, b);
  }
}

/**
 * GetMarketMapResponse is the query response for the GetMarketMap query.
 *
 * @generated from message slinky.marketmap.v1.GetMarketMapResponse
 */
export class GetMarketMapResponse extends Message<GetMarketMapResponse> {
  /**
   * MarketMap defines the global set of market configurations for all providers
   * and markets.
   *
   * @generated from field: slinky.marketmap.v1.MarketMap market_map = 1;
   */
  marketMap?: MarketMap;

  /**
   * LastUpdated is the last block height that the market map was updated.
   * This field can be used as an optimization for clients checking if there
   * is a new update to the map.
   *
   * @generated from field: uint64 last_updated = 2;
   */
  lastUpdated = protoInt64.zero;

  /**
   * Version is the schema version for the MarketMap data structure and query
   * response.
   *
   * @generated from field: uint64 version = 3;
   */
  version = protoInt64.zero;

  /**
   * ChainId is the chain identifier for the market map.
   *
   * @generated from field: string chain_id = 4;
   */
  chainId = "";

  constructor(data?: PartialMessage<GetMarketMapResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.marketmap.v1.GetMarketMapResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "market_map", kind: "message", T: MarketMap },
    { no: 2, name: "last_updated", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "version", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMarketMapResponse {
    return new GetMarketMapResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMarketMapResponse {
    return new GetMarketMapResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMarketMapResponse {
    return new GetMarketMapResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMarketMapResponse | PlainMessage<GetMarketMapResponse> | undefined, b: GetMarketMapResponse | PlainMessage<GetMarketMapResponse> | undefined): boolean {
    return proto3.util.equals(GetMarketMapResponse, a, b);
  }
}

/**
 * ParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message slinky.marketmap.v1.ParamsRequest
 */
export class ParamsRequest extends Message<ParamsRequest> {
  constructor(data?: PartialMessage<ParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.marketmap.v1.ParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParamsRequest {
    return new ParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParamsRequest {
    return new ParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParamsRequest {
    return new ParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ParamsRequest | PlainMessage<ParamsRequest> | undefined, b: ParamsRequest | PlainMessage<ParamsRequest> | undefined): boolean {
    return proto3.util.equals(ParamsRequest, a, b);
  }
}

/**
 * ParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message slinky.marketmap.v1.ParamsResponse
 */
export class ParamsResponse extends Message<ParamsResponse> {
  /**
   * @generated from field: slinky.marketmap.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<ParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.marketmap.v1.ParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParamsResponse {
    return new ParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParamsResponse {
    return new ParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParamsResponse {
    return new ParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ParamsResponse | PlainMessage<ParamsResponse> | undefined, b: ParamsResponse | PlainMessage<ParamsResponse> | undefined): boolean {
    return proto3.util.equals(ParamsResponse, a, b);
  }
}

/**
 * GetLastUpdatedRequest is the request type for the Query/LastUpdated RPC
 * method.
 *
 * @generated from message slinky.marketmap.v1.GetLastUpdatedRequest
 */
export class GetLastUpdatedRequest extends Message<GetLastUpdatedRequest> {
  constructor(data?: PartialMessage<GetLastUpdatedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.marketmap.v1.GetLastUpdatedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLastUpdatedRequest {
    return new GetLastUpdatedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLastUpdatedRequest {
    return new GetLastUpdatedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLastUpdatedRequest {
    return new GetLastUpdatedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLastUpdatedRequest | PlainMessage<GetLastUpdatedRequest> | undefined, b: GetLastUpdatedRequest | PlainMessage<GetLastUpdatedRequest> | undefined): boolean {
    return proto3.util.equals(GetLastUpdatedRequest, a, b);
  }
}

/**
 * GetLastUpdatedResponse is the response type for the Query/LastUpdated RPC
 * method.
 *
 * @generated from message slinky.marketmap.v1.GetLastUpdatedResponse
 */
export class GetLastUpdatedResponse extends Message<GetLastUpdatedResponse> {
  /**
   * @generated from field: uint64 last_updated = 1;
   */
  lastUpdated = protoInt64.zero;

  constructor(data?: PartialMessage<GetLastUpdatedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.marketmap.v1.GetLastUpdatedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "last_updated", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLastUpdatedResponse {
    return new GetLastUpdatedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLastUpdatedResponse {
    return new GetLastUpdatedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLastUpdatedResponse {
    return new GetLastUpdatedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLastUpdatedResponse | PlainMessage<GetLastUpdatedResponse> | undefined, b: GetLastUpdatedResponse | PlainMessage<GetLastUpdatedResponse> | undefined): boolean {
    return proto3.util.equals(GetLastUpdatedResponse, a, b);
  }
}

