// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file slinky/oracle/v1/query.proto (package slinky.oracle.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { CurrencyPair } from "../../types/v1/currency_pair_pb.js";
import { QuotePrice } from "./genesis_pb.js";

/**
 * @generated from message slinky.oracle.v1.GetAllCurrencyPairsRequest
 */
export class GetAllCurrencyPairsRequest extends Message<GetAllCurrencyPairsRequest> {
  constructor(data?: PartialMessage<GetAllCurrencyPairsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.oracle.v1.GetAllCurrencyPairsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllCurrencyPairsRequest {
    return new GetAllCurrencyPairsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllCurrencyPairsRequest {
    return new GetAllCurrencyPairsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllCurrencyPairsRequest {
    return new GetAllCurrencyPairsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllCurrencyPairsRequest | PlainMessage<GetAllCurrencyPairsRequest> | undefined, b: GetAllCurrencyPairsRequest | PlainMessage<GetAllCurrencyPairsRequest> | undefined): boolean {
    return proto3.util.equals(GetAllCurrencyPairsRequest, a, b);
  }
}

/**
 * GetAllCurrencyPairsResponse returns all CurrencyPairs that the module is
 * currently tracking.
 *
 * @generated from message slinky.oracle.v1.GetAllCurrencyPairsResponse
 */
export class GetAllCurrencyPairsResponse extends Message<GetAllCurrencyPairsResponse> {
  /**
   * @generated from field: repeated slinky.types.v1.CurrencyPair currency_pairs = 1;
   */
  currencyPairs: CurrencyPair[] = [];

  constructor(data?: PartialMessage<GetAllCurrencyPairsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.oracle.v1.GetAllCurrencyPairsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "currency_pairs", kind: "message", T: CurrencyPair, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllCurrencyPairsResponse {
    return new GetAllCurrencyPairsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllCurrencyPairsResponse {
    return new GetAllCurrencyPairsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllCurrencyPairsResponse {
    return new GetAllCurrencyPairsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllCurrencyPairsResponse | PlainMessage<GetAllCurrencyPairsResponse> | undefined, b: GetAllCurrencyPairsResponse | PlainMessage<GetAllCurrencyPairsResponse> | undefined): boolean {
    return proto3.util.equals(GetAllCurrencyPairsResponse, a, b);
  }
}

/**
 * GetPriceRequest either takes a CurrencyPair, or an identifier for the
 * CurrencyPair in the format base/quote.
 *
 * @generated from message slinky.oracle.v1.GetPriceRequest
 */
export class GetPriceRequest extends Message<GetPriceRequest> {
  /**
   * CurrencyPair represents the pair that the user wishes to query.
   *
   * @generated from field: slinky.types.v1.CurrencyPair currency_pair = 1;
   */
  currencyPair?: CurrencyPair;

  constructor(data?: PartialMessage<GetPriceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.oracle.v1.GetPriceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "currency_pair", kind: "message", T: CurrencyPair },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPriceRequest {
    return new GetPriceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPriceRequest {
    return new GetPriceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPriceRequest {
    return new GetPriceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPriceRequest | PlainMessage<GetPriceRequest> | undefined, b: GetPriceRequest | PlainMessage<GetPriceRequest> | undefined): boolean {
    return proto3.util.equals(GetPriceRequest, a, b);
  }
}

/**
 * GetPriceResponse is the response from the GetPrice grpc method exposed from
 * the x/oracle query service.
 *
 * @generated from message slinky.oracle.v1.GetPriceResponse
 */
export class GetPriceResponse extends Message<GetPriceResponse> {
  /**
   * QuotePrice represents the quote-price for the CurrencyPair given in
   * GetPriceRequest (possibly nil if no update has been made)
   *
   * @generated from field: slinky.oracle.v1.QuotePrice price = 1;
   */
  price?: QuotePrice;

  /**
   * nonce represents the nonce for the CurrencyPair if it exists in state
   *
   * @generated from field: uint64 nonce = 2;
   */
  nonce = protoInt64.zero;

  /**
   * decimals represents the number of decimals that the quote-price is
   * represented in. For Pairs where ETHEREUM is the quote this will be 18,
   * otherwise it will be 8.
   *
   * @generated from field: uint64 decimals = 3;
   */
  decimals = protoInt64.zero;

  /**
   * ID represents the identifier for the CurrencyPair.
   *
   * @generated from field: uint64 id = 4;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<GetPriceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.oracle.v1.GetPriceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "price", kind: "message", T: QuotePrice },
    { no: 2, name: "nonce", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "decimals", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPriceResponse {
    return new GetPriceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPriceResponse {
    return new GetPriceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPriceResponse {
    return new GetPriceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPriceResponse | PlainMessage<GetPriceResponse> | undefined, b: GetPriceResponse | PlainMessage<GetPriceResponse> | undefined): boolean {
    return proto3.util.equals(GetPriceResponse, a, b);
  }
}

/**
 * GetPricesRequest takes an identifier for the CurrencyPair
 * in the format base/quote.
 *
 * @generated from message slinky.oracle.v1.GetPricesRequest
 */
export class GetPricesRequest extends Message<GetPricesRequest> {
  /**
   * @generated from field: repeated string currency_pair_ids = 1;
   */
  currencyPairIds: string[] = [];

  constructor(data?: PartialMessage<GetPricesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.oracle.v1.GetPricesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "currency_pair_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPricesRequest {
    return new GetPricesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPricesRequest {
    return new GetPricesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPricesRequest {
    return new GetPricesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPricesRequest | PlainMessage<GetPricesRequest> | undefined, b: GetPricesRequest | PlainMessage<GetPricesRequest> | undefined): boolean {
    return proto3.util.equals(GetPricesRequest, a, b);
  }
}

/**
 * GetPricesResponse is the response from the GetPrices grpc method exposed from
 * the x/oracle query service.
 *
 * @generated from message slinky.oracle.v1.GetPricesResponse
 */
export class GetPricesResponse extends Message<GetPricesResponse> {
  /**
   * @generated from field: repeated slinky.oracle.v1.GetPriceResponse prices = 1;
   */
  prices: GetPriceResponse[] = [];

  constructor(data?: PartialMessage<GetPricesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.oracle.v1.GetPricesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "prices", kind: "message", T: GetPriceResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPricesResponse {
    return new GetPricesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPricesResponse {
    return new GetPricesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPricesResponse {
    return new GetPricesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPricesResponse | PlainMessage<GetPricesResponse> | undefined, b: GetPricesResponse | PlainMessage<GetPricesResponse> | undefined): boolean {
    return proto3.util.equals(GetPricesResponse, a, b);
  }
}

