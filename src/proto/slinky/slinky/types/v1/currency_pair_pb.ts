// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file slinky/types/v1/currency_pair.proto (package slinky.types.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * CurrencyPair is the standard representation of a pair of assets, where one
 * (Base) is priced in terms of the other (Quote)
 *
 * @generated from message slinky.types.v1.CurrencyPair
 */
export class CurrencyPair extends Message<CurrencyPair> {
  /**
   * @generated from field: string Base = 1;
   */
  Base = "";

  /**
   * @generated from field: string Quote = 2;
   */
  Quote = "";

  constructor(data?: PartialMessage<CurrencyPair>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.types.v1.CurrencyPair";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Base", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Quote", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CurrencyPair {
    return new CurrencyPair().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CurrencyPair {
    return new CurrencyPair().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CurrencyPair {
    return new CurrencyPair().fromJsonString(jsonString, options);
  }

  static equals(a: CurrencyPair | PlainMessage<CurrencyPair> | undefined, b: CurrencyPair | PlainMessage<CurrencyPair> | undefined): boolean {
    return proto3.util.equals(CurrencyPair, a, b);
  }
}

