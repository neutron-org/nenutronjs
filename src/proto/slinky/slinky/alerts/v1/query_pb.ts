// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file slinky/alerts/v1/query.proto (package slinky.alerts.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Alert } from "./alerts_pb.js";
import { Params } from "./genesis_pb.js";

/**
 * AlertStatus is the type for the status of an Alert, it can be Unconcluded or
 * Concluded.
 *
 * @generated from enum slinky.alerts.v1.AlertStatusID
 */
export enum AlertStatusID {
  /**
   * @generated from enum value: CONCLUSION_STATUS_UNSPECIFIED = 0;
   */
  CONCLUSION_STATUS_UNSPECIFIED = 0,

  /**
   * @generated from enum value: CONCLUSION_STATUS_UNCONCLUDED = 1;
   */
  CONCLUSION_STATUS_UNCONCLUDED = 1,

  /**
   * @generated from enum value: CONCLUSION_STATUS_CONCLUDED = 2;
   */
  CONCLUSION_STATUS_CONCLUDED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AlertStatusID)
proto3.util.setEnumType(AlertStatusID, "slinky.alerts.v1.AlertStatusID", [
  { no: 0, name: "CONCLUSION_STATUS_UNSPECIFIED" },
  { no: 1, name: "CONCLUSION_STATUS_UNCONCLUDED" },
  { no: 2, name: "CONCLUSION_STATUS_CONCLUDED" },
]);

/**
 * AlertsRequest is the request type for the Query.Alerts RPC method, the status
 * field indicates whether the request should return only Unconcluded /
 * Concluded Alerts, or all Alerts.
 *
 * @generated from message slinky.alerts.v1.AlertsRequest
 */
export class AlertsRequest extends Message<AlertsRequest> {
  /**
   * @generated from field: slinky.alerts.v1.AlertStatusID status = 1;
   */
  status = AlertStatusID.CONCLUSION_STATUS_UNSPECIFIED;

  constructor(data?: PartialMessage<AlertsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.alerts.v1.AlertsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(AlertStatusID) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertsRequest {
    return new AlertsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertsRequest {
    return new AlertsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertsRequest {
    return new AlertsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AlertsRequest | PlainMessage<AlertsRequest> | undefined, b: AlertsRequest | PlainMessage<AlertsRequest> | undefined): boolean {
    return proto3.util.equals(AlertsRequest, a, b);
  }
}

/**
 * AlertsResponse is the response type for the Query.Alerts RPC method, it
 * contains the list of Alerts that are being tracked by the alerts module.
 *
 * @generated from message slinky.alerts.v1.AlertsResponse
 */
export class AlertsResponse extends Message<AlertsResponse> {
  /**
   * @generated from field: repeated slinky.alerts.v1.Alert alerts = 1;
   */
  alerts: Alert[] = [];

  constructor(data?: PartialMessage<AlertsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.alerts.v1.AlertsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alerts", kind: "message", T: Alert, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertsResponse {
    return new AlertsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertsResponse {
    return new AlertsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertsResponse {
    return new AlertsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AlertsResponse | PlainMessage<AlertsResponse> | undefined, b: AlertsResponse | PlainMessage<AlertsResponse> | undefined): boolean {
    return proto3.util.equals(AlertsResponse, a, b);
  }
}

/**
 * ParamsRequest is the request type for the Query.Params RPC method.
 *
 * @generated from message slinky.alerts.v1.ParamsRequest
 */
export class ParamsRequest extends Message<ParamsRequest> {
  constructor(data?: PartialMessage<ParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.alerts.v1.ParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParamsRequest {
    return new ParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParamsRequest {
    return new ParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParamsRequest {
    return new ParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ParamsRequest | PlainMessage<ParamsRequest> | undefined, b: ParamsRequest | PlainMessage<ParamsRequest> | undefined): boolean {
    return proto3.util.equals(ParamsRequest, a, b);
  }
}

/**
 * ParamsResponse is the response type for the Query.Params RPC method, it
 * contains the Params of the module.
 *
 * @generated from message slinky.alerts.v1.ParamsResponse
 */
export class ParamsResponse extends Message<ParamsResponse> {
  /**
   * @generated from field: slinky.alerts.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<ParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.alerts.v1.ParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParamsResponse {
    return new ParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParamsResponse {
    return new ParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParamsResponse {
    return new ParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ParamsResponse | PlainMessage<ParamsResponse> | undefined, b: ParamsResponse | PlainMessage<ParamsResponse> | undefined): boolean {
    return proto3.util.equals(ParamsResponse, a, b);
  }
}

