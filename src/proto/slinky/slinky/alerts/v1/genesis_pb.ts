// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file slinky/alerts/v1/genesis.proto (package slinky.alerts.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { AlertWithStatus } from "./alerts_pb.js";

/**
 * AlertParams is the set of parameters for the x/Alerts module's Alerting. It
 * defines whether or not Alerts can be submitted, and if so, the minimum
 * bond amount required to submit an Alert.
 *
 * @generated from message slinky.alerts.v1.AlertParams
 */
export class AlertParams extends Message<AlertParams> {
  /**
   * Enabled is a boolean defining whether or not Alerts can be submitted
   * to the module
   *
   * @generated from field: bool enabled = 1;
   */
  enabled = false;

  /**
   * BondAmount is the minimum amount of bond required to submit an
   * Alert
   *
   * @generated from field: cosmos.base.v1beta1.Coin bond_amount = 2;
   */
  bondAmount?: Coin;

  /**
   * MaxBlockAge defines the maximum age of an Alert before it is pruned, notice
   * this is defined wrt. the height that the Alert references, i.e Alerts are
   * only relevant until Alert.Height + MaxBlockAge is reached.
   *
   * @generated from field: uint64 max_block_age = 3;
   */
  maxBlockAge = protoInt64.zero;

  constructor(data?: PartialMessage<AlertParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.alerts.v1.AlertParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "bond_amount", kind: "message", T: Coin },
    { no: 3, name: "max_block_age", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AlertParams {
    return new AlertParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AlertParams {
    return new AlertParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AlertParams {
    return new AlertParams().fromJsonString(jsonString, options);
  }

  static equals(a: AlertParams | PlainMessage<AlertParams> | undefined, b: AlertParams | PlainMessage<AlertParams> | undefined): boolean {
    return proto3.util.equals(AlertParams, a, b);
  }
}

/**
 * PruningParams defines the criterion for pruning Alerts from the state.
 *
 * @generated from message slinky.alerts.v1.PruningParams
 */
export class PruningParams extends Message<PruningParams> {
  /**
   * Enabled defines whether Alerts are to be pruned
   *
   * @generated from field: bool enabled = 1;
   */
  enabled = false;

  /**
   * BlocksToPrune defines the number of blocks until an Alert will be pruned
   * from state, notice this is defined wrt. the current block height, i.e
   * Alerts will be stored in state until current_height + BlocksToPrune is
   * reached.
   *
   * @generated from field: uint64 blocks_to_prune = 2;
   */
  blocksToPrune = protoInt64.zero;

  constructor(data?: PartialMessage<PruningParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.alerts.v1.PruningParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "blocks_to_prune", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PruningParams {
    return new PruningParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PruningParams {
    return new PruningParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PruningParams {
    return new PruningParams().fromJsonString(jsonString, options);
  }

  static equals(a: PruningParams | PlainMessage<PruningParams> | undefined, b: PruningParams | PlainMessage<PruningParams> | undefined): boolean {
    return proto3.util.equals(PruningParams, a, b);
  }
}

/**
 * Params is the set of parameters for the x/Alerts module.
 *
 * @generated from message slinky.alerts.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * AlertParams is the set of parameters for the x/Alerts module's Alerting.
   *
   * @generated from field: slinky.alerts.v1.AlertParams alert_params = 1;
   */
  alertParams?: AlertParams;

  /**
   * ConclusionVerificationParams is the set of parameters for the x/Alerts
   * module's conclusion verification.
   *
   * @generated from field: google.protobuf.Any conclusion_verification_params = 2;
   */
  conclusionVerificationParams?: Any;

  /**
   * PruningParams is the set of parameters for the x/Alerts module's pruning.
   *
   * @generated from field: slinky.alerts.v1.PruningParams pruning_params = 3;
   */
  pruningParams?: PruningParams;

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.alerts.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "alert_params", kind: "message", T: AlertParams },
    { no: 2, name: "conclusion_verification_params", kind: "message", T: Any },
    { no: 3, name: "pruning_params", kind: "message", T: PruningParams },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

/**
 * GenesisState is the state that must be provided at genesis. It contains
 * params for the module, and the set initial Alerts.
 *
 * @generated from message slinky.alerts.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * Params is the set of x/Alerts parameters
   *
   * @generated from field: slinky.alerts.v1.Params params = 1;
   */
  params?: Params;

  /**
   * Alerts is the set of Alerts that have been submitted to the module
   *
   * @generated from field: repeated slinky.alerts.v1.AlertWithStatus alerts = 2;
   */
  alerts: AlertWithStatus[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.alerts.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "alerts", kind: "message", T: AlertWithStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

