// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file slinky/incentives/v1/examples/goodprice.proto (package slinky.incentives.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * GoodPriceIncentive is a message that contains the information about a good
 * price that was submitted by a validator.
 *
 * NOTE: This is an example of a good price incentive. It is not used in
 * production.
 *
 * @generated from message slinky.incentives.v1.GoodPriceIncentive
 */
export class GoodPriceIncentive extends Message<GoodPriceIncentive> {
  /**
   * Validator is the address of the validator that submitted the good price.
   *
   * @generated from field: string validator = 1;
   */
  validator = "";

  /**
   * Amount is the amount to reward.
   *
   * @generated from field: string amount = 2;
   */
  amount = "";

  constructor(data?: PartialMessage<GoodPriceIncentive>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.incentives.v1.GoodPriceIncentive";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GoodPriceIncentive {
    return new GoodPriceIncentive().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GoodPriceIncentive {
    return new GoodPriceIncentive().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GoodPriceIncentive {
    return new GoodPriceIncentive().fromJsonString(jsonString, options);
  }

  static equals(a: GoodPriceIncentive | PlainMessage<GoodPriceIncentive> | undefined, b: GoodPriceIncentive | PlainMessage<GoodPriceIncentive> | undefined): boolean {
    return proto3.util.equals(GoodPriceIncentive, a, b);
  }
}

