// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file slinky/incentives/v1/query.proto (package slinky.incentives.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { IncentivesByType } from "./genesis_pb.js";

/**
 * GetIncentivesByTypeRequest is the request type for the
 * Query/GetIncentivesByType RPC method.
 *
 * @generated from message slinky.incentives.v1.GetIncentivesByTypeRequest
 */
export class GetIncentivesByTypeRequest extends Message<GetIncentivesByTypeRequest> {
  /**
   * IncentiveType is the incentive type i.e. (BadPriceIncentiveType,
   * GoodPriceIncentiveType).
   *
   * @generated from field: string incentive_type = 1;
   */
  incentiveType = "";

  constructor(data?: PartialMessage<GetIncentivesByTypeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.incentives.v1.GetIncentivesByTypeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "incentive_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIncentivesByTypeRequest {
    return new GetIncentivesByTypeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIncentivesByTypeRequest {
    return new GetIncentivesByTypeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIncentivesByTypeRequest {
    return new GetIncentivesByTypeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetIncentivesByTypeRequest | PlainMessage<GetIncentivesByTypeRequest> | undefined, b: GetIncentivesByTypeRequest | PlainMessage<GetIncentivesByTypeRequest> | undefined): boolean {
    return proto3.util.equals(GetIncentivesByTypeRequest, a, b);
  }
}

/**
 * GetIncentivesByTypeResponse is the response type for the
 * Query/GetIncentivesByType RPC method.
 *
 * @generated from message slinky.incentives.v1.GetIncentivesByTypeResponse
 */
export class GetIncentivesByTypeResponse extends Message<GetIncentivesByTypeResponse> {
  /**
   * Entries is the list of incentives of the given type.
   *
   * @generated from field: repeated bytes entries = 1;
   */
  entries: Uint8Array[] = [];

  constructor(data?: PartialMessage<GetIncentivesByTypeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.incentives.v1.GetIncentivesByTypeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entries", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetIncentivesByTypeResponse {
    return new GetIncentivesByTypeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetIncentivesByTypeResponse {
    return new GetIncentivesByTypeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetIncentivesByTypeResponse {
    return new GetIncentivesByTypeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetIncentivesByTypeResponse | PlainMessage<GetIncentivesByTypeResponse> | undefined, b: GetIncentivesByTypeResponse | PlainMessage<GetIncentivesByTypeResponse> | undefined): boolean {
    return proto3.util.equals(GetIncentivesByTypeResponse, a, b);
  }
}

/**
 * GetAllIncentivesRequest is the request type for the Query/GetAllIncentives
 * RPC method.
 *
 * @generated from message slinky.incentives.v1.GetAllIncentivesRequest
 */
export class GetAllIncentivesRequest extends Message<GetAllIncentivesRequest> {
  constructor(data?: PartialMessage<GetAllIncentivesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.incentives.v1.GetAllIncentivesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllIncentivesRequest {
    return new GetAllIncentivesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllIncentivesRequest {
    return new GetAllIncentivesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllIncentivesRequest {
    return new GetAllIncentivesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllIncentivesRequest | PlainMessage<GetAllIncentivesRequest> | undefined, b: GetAllIncentivesRequest | PlainMessage<GetAllIncentivesRequest> | undefined): boolean {
    return proto3.util.equals(GetAllIncentivesRequest, a, b);
  }
}

/**
 * GetAllIncentivesResponse is the response type for the Query/GetAllIncentives
 * RPC method.
 *
 * @generated from message slinky.incentives.v1.GetAllIncentivesResponse
 */
export class GetAllIncentivesResponse extends Message<GetAllIncentivesResponse> {
  /**
   * Registry is the list of all incentives, grouped by type.
   *
   * @generated from field: repeated slinky.incentives.v1.IncentivesByType registry = 1;
   */
  registry: IncentivesByType[] = [];

  constructor(data?: PartialMessage<GetAllIncentivesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "slinky.incentives.v1.GetAllIncentivesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "registry", kind: "message", T: IncentivesByType, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllIncentivesResponse {
    return new GetAllIncentivesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllIncentivesResponse {
    return new GetAllIncentivesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllIncentivesResponse {
    return new GetAllIncentivesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllIncentivesResponse | PlainMessage<GetAllIncentivesResponse> | undefined, b: GetAllIncentivesResponse | PlainMessage<GetAllIncentivesResponse> | undefined): boolean {
    return proto3.util.equals(GetAllIncentivesResponse, a, b);
  }
}

