// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file sdk/proposals/v1/types.proto (package sdk.proposals.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * ProposalInfo contains the metadata about a given proposal that was built by 
 * the block-sdk. This is used to verify and consilidate proposal data across 
 * the network.
 *
 * @generated from message sdk.proposals.v1.ProposalInfo
 */
export class ProposalInfo extends Message<ProposalInfo> {
  /**
   * TxsByLane contains information about how each partial proposal
   * was constructed by the block-sdk lanes.
   *
   * @generated from field: map<string, uint64> txs_by_lane = 1;
   */
  txsByLane: { [key: string]: bigint } = {};

  /**
   * MaxBlockSize corresponds to the upper bound on the size of the
   * block that was used to construct this block proposal.
   *
   * @generated from field: int64 max_block_size = 2;
   */
  maxBlockSize = protoInt64.zero;

  /**
   * MaxGasLimit corresponds to the upper bound on the gas limit of the
   * block that was used to construct this block proposal.
   *
   * @generated from field: uint64 max_gas_limit = 3;
   */
  maxGasLimit = protoInt64.zero;

  /**
   * BlockSize corresponds to the size of this block proposal.
   *
   * @generated from field: int64 block_size = 4;
   */
  blockSize = protoInt64.zero;

  /**
   * GasLimit corresponds to the gas limit of this block proposal.
   *
   * @generated from field: uint64 gas_limit = 5;
   */
  gasLimit = protoInt64.zero;

  constructor(data?: PartialMessage<ProposalInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sdk.proposals.v1.ProposalInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "txs_by_lane", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 4 /* ScalarType.UINT64 */} },
    { no: 2, name: "max_block_size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "max_gas_limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "block_size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "gas_limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProposalInfo {
    return new ProposalInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProposalInfo {
    return new ProposalInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProposalInfo {
    return new ProposalInfo().fromJsonString(jsonString, options);
  }

  static equals(a: ProposalInfo | PlainMessage<ProposalInfo> | undefined, b: ProposalInfo | PlainMessage<ProposalInfo> | undefined): boolean {
    return proto3.util.equals(ProposalInfo, a, b);
  }
}

