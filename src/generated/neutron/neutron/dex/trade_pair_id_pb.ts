// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file neutron/dex/trade_pair_id.proto (package neutron.dex, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message neutron.dex.TradePairID
 */
export class TradePairID extends Message<TradePairID> {
  /**
   * @generated from field: string maker_denom = 2;
   */
  makerDenom = "";

  /**
   * @generated from field: string taker_denom = 3;
   */
  takerDenom = "";

  constructor(data?: PartialMessage<TradePairID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.dex.TradePairID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "maker_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "taker_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TradePairID {
    return new TradePairID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TradePairID {
    return new TradePairID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TradePairID {
    return new TradePairID().fromJsonString(jsonString, options);
  }

  static equals(a: TradePairID | PlainMessage<TradePairID> | undefined, b: TradePairID | PlainMessage<TradePairID> | undefined): boolean {
    return proto3.util.equals(TradePairID, a, b);
  }
}

