// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file neutron/feerefunder/fee.proto (package neutron.feerefunder, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../cosmos/base/v1beta1/coin_pb.js";

/**
 * Fee defines the ICS29 receive, acknowledgement and timeout fees
 *
 * @generated from message neutron.feerefunder.Fee
 */
export class Fee extends Message<Fee> {
  /**
   * the packet receive fee
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin recv_fee = 1;
   */
  recvFee: Coin[] = [];

  /**
   * the packet acknowledgement fee
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin ack_fee = 2;
   */
  ackFee: Coin[] = [];

  /**
   * the packet timeout fee
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin timeout_fee = 3;
   */
  timeoutFee: Coin[] = [];

  constructor(data?: PartialMessage<Fee>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.feerefunder.Fee";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "recv_fee", kind: "message", T: Coin, repeated: true },
    { no: 2, name: "ack_fee", kind: "message", T: Coin, repeated: true },
    { no: 3, name: "timeout_fee", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Fee {
    return new Fee().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Fee {
    return new Fee().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Fee {
    return new Fee().fromJsonString(jsonString, options);
  }

  static equals(a: Fee | PlainMessage<Fee> | undefined, b: Fee | PlainMessage<Fee> | undefined): boolean {
    return proto3.util.equals(Fee, a, b);
  }
}

/**
 * @generated from message neutron.feerefunder.PacketID
 */
export class PacketID extends Message<PacketID> {
  /**
   * @generated from field: string channel_id = 1;
   */
  channelId = "";

  /**
   * @generated from field: string port_id = 2;
   */
  portId = "";

  /**
   * @generated from field: uint64 sequence = 3;
   */
  sequence = protoInt64.zero;

  constructor(data?: PartialMessage<PacketID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.feerefunder.PacketID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sequence", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PacketID {
    return new PacketID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PacketID {
    return new PacketID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PacketID {
    return new PacketID().fromJsonString(jsonString, options);
  }

  static equals(a: PacketID | PlainMessage<PacketID> | undefined, b: PacketID | PlainMessage<PacketID> | undefined): boolean {
    return proto3.util.equals(PacketID, a, b);
  }
}

