// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file interchaintxs/v1/query.proto (package neutron.interchaintxs, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message neutron.interchaintxs.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.interchaintxs.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message neutron.interchaintxs.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: neutron.interchaintxs.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.interchaintxs.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message neutron.interchaintxs.QueryInterchainAccountAddressRequest
 */
export class QueryInterchainAccountAddressRequest extends Message<QueryInterchainAccountAddressRequest> {
  /**
   * owner_address is the owner of the interchain account on the controller
   * chain
   *
   * @generated from field: string owner_address = 1;
   */
  ownerAddress = "";

  /**
   * interchain_account_id is an identifier of your interchain account from
   * which you want to execute msgs
   *
   * @generated from field: string interchain_account_id = 2;
   */
  interchainAccountId = "";

  /**
   * connection_id is an IBC connection identifier between Neutron and remote
   * chain
   *
   * @generated from field: string connection_id = 3;
   */
  connectionId = "";

  constructor(data?: PartialMessage<QueryInterchainAccountAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.interchaintxs.QueryInterchainAccountAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "owner_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "interchain_account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "connection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryInterchainAccountAddressRequest {
    return new QueryInterchainAccountAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryInterchainAccountAddressRequest {
    return new QueryInterchainAccountAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryInterchainAccountAddressRequest {
    return new QueryInterchainAccountAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryInterchainAccountAddressRequest | PlainMessage<QueryInterchainAccountAddressRequest> | undefined, b: QueryInterchainAccountAddressRequest | PlainMessage<QueryInterchainAccountAddressRequest> | undefined): boolean {
    return proto3.util.equals(QueryInterchainAccountAddressRequest, a, b);
  }
}

/**
 * Query response for an interchain account address
 *
 * @generated from message neutron.interchaintxs.QueryInterchainAccountAddressResponse
 */
export class QueryInterchainAccountAddressResponse extends Message<QueryInterchainAccountAddressResponse> {
  /**
   * The corresponding interchain account address on the host chain
   *
   * @generated from field: string interchain_account_address = 1;
   */
  interchainAccountAddress = "";

  constructor(data?: PartialMessage<QueryInterchainAccountAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.interchaintxs.QueryInterchainAccountAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "interchain_account_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryInterchainAccountAddressResponse {
    return new QueryInterchainAccountAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryInterchainAccountAddressResponse {
    return new QueryInterchainAccountAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryInterchainAccountAddressResponse {
    return new QueryInterchainAccountAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryInterchainAccountAddressResponse | PlainMessage<QueryInterchainAccountAddressResponse> | undefined, b: QueryInterchainAccountAddressResponse | PlainMessage<QueryInterchainAccountAddressResponse> | undefined): boolean {
    return proto3.util.equals(QueryInterchainAccountAddressResponse, a, b);
  }
}

