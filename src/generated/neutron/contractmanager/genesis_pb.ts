// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file contractmanager/genesis.proto (package neutron.contractmanager, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";

/**
 * Failure message contains information about ACK failures and can be used to
 * replay ACK in case of requirement.
 *
 * @generated from message neutron.contractmanager.Failure
 */
export class Failure extends Message<Failure> {
  /**
   * ChannelId
   *
   * @generated from field: string channel_id = 1;
   */
  channelId = "";

  /**
   * Address of the failed contract
   *
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * id of the failure under specific address
   *
   * @generated from field: uint64 id = 3;
   */
  id = protoInt64.zero;

  /**
   * ACK id to restore
   *
   * @generated from field: uint64 ack_id = 4;
   */
  ackId = protoInt64.zero;

  /**
   * Acknowledgement type
   *
   * @generated from field: string ack_type = 5;
   */
  ackType = "";

  constructor(data?: PartialMessage<Failure>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.contractmanager.Failure";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channel_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "ack_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 5, name: "ack_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Failure {
    return new Failure().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Failure {
    return new Failure().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Failure {
    return new Failure().fromJsonString(jsonString, options);
  }

  static equals(a: Failure | PlainMessage<Failure> | undefined, b: Failure | PlainMessage<Failure> | undefined): boolean {
    return proto3.util.equals(Failure, a, b);
  }
}

/**
 * GenesisState defines the contractmanager module's genesis state.
 *
 * @generated from message neutron.contractmanager.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * @generated from field: neutron.contractmanager.Params params = 1;
   */
  params?: Params;

  /**
   * List of the contract failures
   *
   * @generated from field: repeated neutron.contractmanager.Failure failures_list = 2;
   */
  failuresList: Failure[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.contractmanager.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "failures_list", kind: "message", T: Failure, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

