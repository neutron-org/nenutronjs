// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file cron/query.proto (package neutron.cron, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Schedule } from "./schedule_pb.js";
import { PageRequest, PageResponse } from "../cosmos/base/query/v1beta1/pagination_pb.js";

/**
 * @generated from message neutron.cron.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.cron.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * @generated from message neutron.cron.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: neutron.cron.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.cron.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message neutron.cron.QueryGetScheduleRequest
 */
export class QueryGetScheduleRequest extends Message<QueryGetScheduleRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<QueryGetScheduleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.cron.QueryGetScheduleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetScheduleRequest {
    return new QueryGetScheduleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetScheduleRequest {
    return new QueryGetScheduleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetScheduleRequest {
    return new QueryGetScheduleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetScheduleRequest | PlainMessage<QueryGetScheduleRequest> | undefined, b: QueryGetScheduleRequest | PlainMessage<QueryGetScheduleRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetScheduleRequest, a, b);
  }
}

/**
 * @generated from message neutron.cron.QueryGetScheduleResponse
 */
export class QueryGetScheduleResponse extends Message<QueryGetScheduleResponse> {
  /**
   * @generated from field: neutron.cron.Schedule schedule = 1;
   */
  schedule?: Schedule;

  constructor(data?: PartialMessage<QueryGetScheduleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.cron.QueryGetScheduleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schedule", kind: "message", T: Schedule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetScheduleResponse {
    return new QueryGetScheduleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetScheduleResponse {
    return new QueryGetScheduleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetScheduleResponse {
    return new QueryGetScheduleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetScheduleResponse | PlainMessage<QueryGetScheduleResponse> | undefined, b: QueryGetScheduleResponse | PlainMessage<QueryGetScheduleResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetScheduleResponse, a, b);
  }
}

/**
 * @generated from message neutron.cron.QuerySchedulesRequest
 */
export class QuerySchedulesRequest extends Message<QuerySchedulesRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QuerySchedulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.cron.QuerySchedulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySchedulesRequest {
    return new QuerySchedulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySchedulesRequest {
    return new QuerySchedulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySchedulesRequest {
    return new QuerySchedulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySchedulesRequest | PlainMessage<QuerySchedulesRequest> | undefined, b: QuerySchedulesRequest | PlainMessage<QuerySchedulesRequest> | undefined): boolean {
    return proto3.util.equals(QuerySchedulesRequest, a, b);
  }
}

/**
 * @generated from message neutron.cron.QuerySchedulesResponse
 */
export class QuerySchedulesResponse extends Message<QuerySchedulesResponse> {
  /**
   * @generated from field: repeated neutron.cron.Schedule schedules = 1;
   */
  schedules: Schedule[] = [];

  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QuerySchedulesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neutron.cron.QuerySchedulesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schedules", kind: "message", T: Schedule, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuerySchedulesResponse {
    return new QuerySchedulesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuerySchedulesResponse {
    return new QuerySchedulesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuerySchedulesResponse {
    return new QuerySchedulesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QuerySchedulesResponse | PlainMessage<QuerySchedulesResponse> | undefined, b: QuerySchedulesResponse | PlainMessage<QuerySchedulesResponse> | undefined): boolean {
    return proto3.util.equals(QuerySchedulesResponse, a, b);
  }
}

